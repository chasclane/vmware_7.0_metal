{
  "version": 4,
  "terraform_version": "0.13.5",
  "serial": 147,
  "lineage": "7191a08e-3739-a379-0554-c56b3dc3701c",
  "outputs": {
    "vCenter_Appliance_Root_Password": {
      "value": "0UPjq0YB?5g?Jnzz",
      "type": "string"
    },
    "vCenter_FQDN": {
      "value": "vcva.equinix-metal.local",
      "type": "string"
    },
    "vCenter_Password": {
      "value": "4!c1Dmu!?GVoZD9a",
      "type": "string"
    },
    "vCenter_Username": {
      "value": "Administrator@vsphere.local",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "claim_vsan_disks",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2a0dee11e28fec101d0ef836c45e6af365367eb51720e648966fbd99e70da72f",
            "rendered": "import json\nimport ipaddress\nimport os\nimport sys\nimport subprocess\nimport socket\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\nimport vsanapiutils\nfrom operator import itemgetter, attrgetter\nimport requests\nimport ssl\n\n\n# A large portion of this code was lifted from: https://github.com/storage-code/vsanDeploy/blob/master/vsanDeploy.py\n\n\ndef sizeof_fmt(num, suffix='B'):\n   for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n      if abs(num) \u003c 1024.0:\n         return \"%3.1f%s%s\" % (num, unit, suffix)\n      num /= 1024.0\n   return \"%.1f%s%s\" % (num, 'Yi', suffix)\n\n\ndef getClusterInstance(clusterName, serviceInstance):\n    content = serviceInstance.RetrieveContent()\n    searchIndex = content.searchIndex\n    datacenters = content.rootFolder.childEntity\n    for datacenter in datacenters:\n       cluster = searchIndex.FindChild(datacenter.hostFolder, clusterName)\n       if cluster is not None:\n           return cluster\n    return None\n\n\ndef CollectMultiple(content, objects, parameters, handleNotFound=True):\n    if len(objects) == 0:\n        return {}\n    result = None\n    pc = content.propertyCollector\n    propSet = [vim.PropertySpec(\n        type=objects[0].__class__,\n        pathSet=parameters\n    )]\n\n    while result == None and len(objects) \u003e 0:\n        try:\n            objectSet = []\n            for obj in objects:\n                objectSet.append(vim.ObjectSpec(obj=obj))\n            specSet = [vim.PropertyFilterSpec(objectSet=objectSet, propSet=propSet)]\n            result = pc.RetrieveProperties(specSet=specSet)\n        except vim.ManagedObjectNotFound as ex:\n            objects.remove(ex.obj)\n            result = None\n\n    out = {}\n    for x in result:\n        out[x.obj] = {}\n        for y in x.propSet:\n            out[x.obj][y.name] = y.val\n    return out\n\n\n# Terraform Vars\nvcenter_cluster_name = 'dc13-1'\nvcenter_fqdn = 'vcva.equinix-metal.local'\nvcenter_user = 'Administrator@vsphere.local'\nvcenter_pass = '4!c1Dmu!?GVoZD9a'\npacket_server_plan = 'm3.large.x86'\nif packet_server_plan[0].lower() == 's':\n    deploy_type = 'hybrid'\nelse:\n    deploy_type = 'allFlash'\n\n# Workaround for SSL verification for vSan API\nrequests.packages.urllib3.disable_warnings()\nssl._create_default_https_context = ssl._create_unverified_context\ncontext = ssl.create_default_context()\ncontext.check_hostname = False\ncontext.verify_mode = ssl.CERT_NONE\n\n\nsi = connect.SmartConnectNoSSL(host=vcenter_fqdn, user=vcenter_user, pwd=vcenter_pass, port=443)\ncluster = getClusterInstance(vcenter_cluster_name, si)\nvcMos = vsanapiutils.GetVsanVcMos(si._stub, context=context)\nvsanClusterSystem = vcMos['vsan-cluster-config-system']\nvsanVcDiskManagementSystem = vcMos['vsan-disk-management-system']\nhostProps = CollectMultiple(si.content, cluster.host, ['name', 'configManager.vsanSystem', 'configManager.storageSystem'])\nhosts = hostProps.keys()\n\ndiskmap = {host: {'cache':[],'capacity':[]} for host in hosts}\ncacheDisks = []\ncapacityDisks = []\n\nfor host in hosts:\n    ssds = [result.disk for result in hostProps[host]['configManager.vsanSystem'].QueryDisksForVsan() if\n        result.state == 'eligible' and result.disk.ssd]\n    smallerSize = min([disk.capacity.block * disk.capacity.blockSize for disk in ssds])\n    for ssd in ssds:\n        size = ssd.capacity.block * ssd.capacity.blockSize\n        if size == smallerSize:\n            diskmap[host]['cache'].append(ssd)\n            cacheDisks.append((ssd.displayName, sizeof_fmt(size), hostProps[host]['name']))\n        else:\n            diskmap[host]['capacity'].append(ssd)\n            capacityDisks.append((ssd.displayName, sizeof_fmt(size), hostProps[host]['name']))\n\ntasks = []\nfor host,disks in diskmap.items():\n    if len(disks['cache']) \u003e len(disks['capacity']):\n        disks['cache'] = disks['cache'][:len(disks['capacity'])]\n    try:\n        dm = vim.VimVsanHostDiskMappingCreationSpec(\n            cacheDisks=disks['cache'],\n            capacityDisks=disks['capacity'],\n            creationType=deploy_type,\n            host=host\n        )\n        task = vsanVcDiskManagementSystem.InitializeDiskMappings(dm)\n        tasks.append(task)\n    except expression as identifier:\n        print(\"Some vSan Claim error... Check vSan...\")\n    \n\n    \n",
            "template": "import json\nimport ipaddress\nimport os\nimport sys\nimport subprocess\nimport socket\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\nimport vsanapiutils\nfrom operator import itemgetter, attrgetter\nimport requests\nimport ssl\n\n\n# A large portion of this code was lifted from: https://github.com/storage-code/vsanDeploy/blob/master/vsanDeploy.py\n\n\ndef sizeof_fmt(num, suffix='B'):\n   for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n      if abs(num) \u003c 1024.0:\n         return \"%3.1f%s%s\" % (num, unit, suffix)\n      num /= 1024.0\n   return \"%.1f%s%s\" % (num, 'Yi', suffix)\n\n\ndef getClusterInstance(clusterName, serviceInstance):\n    content = serviceInstance.RetrieveContent()\n    searchIndex = content.searchIndex\n    datacenters = content.rootFolder.childEntity\n    for datacenter in datacenters:\n       cluster = searchIndex.FindChild(datacenter.hostFolder, clusterName)\n       if cluster is not None:\n           return cluster\n    return None\n\n\ndef CollectMultiple(content, objects, parameters, handleNotFound=True):\n    if len(objects) == 0:\n        return {}\n    result = None\n    pc = content.propertyCollector\n    propSet = [vim.PropertySpec(\n        type=objects[0].__class__,\n        pathSet=parameters\n    )]\n\n    while result == None and len(objects) \u003e 0:\n        try:\n            objectSet = []\n            for obj in objects:\n                objectSet.append(vim.ObjectSpec(obj=obj))\n            specSet = [vim.PropertyFilterSpec(objectSet=objectSet, propSet=propSet)]\n            result = pc.RetrieveProperties(specSet=specSet)\n        except vim.ManagedObjectNotFound as ex:\n            objects.remove(ex.obj)\n            result = None\n\n    out = {}\n    for x in result:\n        out[x.obj] = {}\n        for y in x.propSet:\n            out[x.obj][y.name] = y.val\n    return out\n\n\n# Terraform Vars\nvcenter_cluster_name = '${vcenter_cluster_name}'\nvcenter_fqdn = '${vcenter_fqdn}'\nvcenter_user = '${vcenter_user}@${vcenter_domain}'\nvcenter_pass = '${vcenter_pass}'\npacket_server_plan = '${plan_type}'\nif packet_server_plan[0].lower() == 's':\n    deploy_type = 'hybrid'\nelse:\n    deploy_type = 'allFlash'\n\n# Workaround for SSL verification for vSan API\nrequests.packages.urllib3.disable_warnings()\nssl._create_default_https_context = ssl._create_unverified_context\ncontext = ssl.create_default_context()\ncontext.check_hostname = False\ncontext.verify_mode = ssl.CERT_NONE\n\n\nsi = connect.SmartConnectNoSSL(host=vcenter_fqdn, user=vcenter_user, pwd=vcenter_pass, port=443)\ncluster = getClusterInstance(vcenter_cluster_name, si)\nvcMos = vsanapiutils.GetVsanVcMos(si._stub, context=context)\nvsanClusterSystem = vcMos['vsan-cluster-config-system']\nvsanVcDiskManagementSystem = vcMos['vsan-disk-management-system']\nhostProps = CollectMultiple(si.content, cluster.host, ['name', 'configManager.vsanSystem', 'configManager.storageSystem'])\nhosts = hostProps.keys()\n\ndiskmap = {host: {'cache':[],'capacity':[]} for host in hosts}\ncacheDisks = []\ncapacityDisks = []\n\nfor host in hosts:\n    ssds = [result.disk for result in hostProps[host]['configManager.vsanSystem'].QueryDisksForVsan() if\n        result.state == 'eligible' and result.disk.ssd]\n    smallerSize = min([disk.capacity.block * disk.capacity.blockSize for disk in ssds])\n    for ssd in ssds:\n        size = ssd.capacity.block * ssd.capacity.blockSize\n        if size == smallerSize:\n            diskmap[host]['cache'].append(ssd)\n            cacheDisks.append((ssd.displayName, sizeof_fmt(size), hostProps[host]['name']))\n        else:\n            diskmap[host]['capacity'].append(ssd)\n            capacityDisks.append((ssd.displayName, sizeof_fmt(size), hostProps[host]['name']))\n\ntasks = []\nfor host,disks in diskmap.items():\n    if len(disks['cache']) \u003e len(disks['capacity']):\n        disks['cache'] = disks['cache'][:len(disks['capacity'])]\n    try:\n        dm = vim.VimVsanHostDiskMappingCreationSpec(\n            cacheDisks=disks['cache'],\n            capacityDisks=disks['capacity'],\n            creationType=deploy_type,\n            host=host\n        )\n        task = vsanVcDiskManagementSystem.InitializeDiskMappings(dm)\n        tasks.append(task)\n    except expression as identifier:\n        print(\"Some vSan Claim error... Check vSan...\")\n    \n\n    \n",
            "vars": {
              "plan_type": "m3.large.x86",
              "vcenter_cluster_name": "dc13-1",
              "vcenter_domain": "vsphere.local",
              "vcenter_fqdn": "vcva.equinix-metal.local",
              "vcenter_pass": "4!c1Dmu!?GVoZD9a",
              "vcenter_user": "Administrator"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "deploy_vcva_script",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9bcb293f400be4a60798be8a97b5009e92d4a9b880e4fae127c13c628a720ced",
            "rendered": "import json\nimport ipaddress\nimport os\nimport sys\nimport subprocess\nimport socket\nfrom time import sleep\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\n\n\ndef get_ssl_thumbprint(host_ip):\n    p1 = subprocess.Popen(('echo', '-n'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    p2 = subprocess.Popen(('openssl', 's_client', '-connect', '{0}:443'.format(host_ip)),\n                          stdin=p1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    p3 = subprocess.Popen(('openssl', 'x509', '-noout', '-fingerprint', '-sha1'),\n                          stdin=p2.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = p3.stdout.read()\n    ssl_thumbprint = out.split(b'=')[-1].strip()\n    return ssl_thumbprint.decode(\"utf-8\")\n\n\n# Vars from Terraform\nprivate_subnets = '[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]'\npublic_subnets = '[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]'\npublic_cidrs = '[\"86.109.7.160/28\"]'\nesx_passwords = '[\"GGu]5Dd,s\\u0026\",\"w02\\u003e7DvUu[\",\"vK/7?3uD5=\"]'\nvcenter_username ='Administrator@vsphere.local'\nsso_password = '4!c1Dmu!?GVoZD9a'\ndc_name = 'Equinix Metal DC13'\ncluster_name = 'dc13-1'\nvcenter_network = 'VM Public Net 1'\n\n# Parse TF Vars\nsubnets = json.loads(private_subnets)\npublic_subnets = json.loads(public_subnets)\npublic_cidrs = json.loads(public_cidrs)\nfor i in range(len(public_cidrs)):\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\nesx_passes = json.loads(esx_passwords)\nesx = []\nfor pw in esx_passes:\n    esx.append({\"password\": pw})\n\nfor subnet in subnets:\n    if subnet['vsphere_service_type'] == 'management':\n        esx_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[3].compressed\n        for i in range(len(esx)):\n            esx[i]['private_ip'] = list(ipaddress.ip_network(subnet['cidr']).hosts())[i + 3].compressed\n    if subnet['name'] == vcenter_network:\n        vcenter_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        gateway_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n        prefix_length = int(subnet['cidr'].split('/')[1])\n\nos.system(\"sed -i 's/__ESXI_IP__/{}/g' /root/vcva_template.json\".format(esx_ip))\nos.system(\"sed -i 's/__VCENTER_IP__/{}/g' /root/vcva_template.json\".format(vcenter_ip))\nos.system(\"sed -i 's/__VCENTER_GATEWAY__/{}/g' /root/vcva_template.json\".format(gateway_ip))\nos.system(\"sed -i 's/__VCENTER_PREFIX_LENGTH__/{}/g' /root/vcva_template.json\".format(prefix_length))\nos.system(\"/mnt/vcsa-cli-installer/lin64/vcsa-deploy install --accept-eula --acknowledge-ceip \"\n          \"--no-esx-ssl-verify /root/vcva_template.json\")\n\n# Connect to vCenter\nfor i in range(1, 30):\n    si = None\n    try:\n        si = connect.SmartConnectNoSSL(host=vcenter_ip, user=vcenter_username, pwd=sso_password, port=443)\n        break\n    except Exception:\n        sleep(10)\nif si == None:\n    print(\"Couldn't connect to vCenter!!!\")\n    sys.exit(1)\n\n# Create Datacenter in the root folder\nfolder = si.content.rootFolder\ndc = folder.CreateDatacenter(name=dc_name)\n\n# Create cluster config\ncluster_config = vim.cluster.ConfigSpecEx()\n\n# Create DRS config\ndrs_config=vim.cluster.DrsConfigInfo()\ndrs_config.enabled = True\ncluster_config.drsConfig=drs_config\n\n# Create vSan config\nvsan_config=vim.vsan.cluster.ConfigInfo()\nvsan_config.enabled = True\nvsan_config.defaultConfig = vim.vsan.cluster.ConfigInfo.HostDefaultInfo(\n                                autoClaimStorage = True\n                            )\ncluster_config.vsanConfig = vsan_config\n\n# Create HA config\nha_config = vim.cluster.DasConfigInfo()\nha_config.enabled = True\nha_config.hostMonitoring = vim.cluster.DasConfigInfo.ServiceState.enabled\nha_config.failoverLevel = 1\ncluster_config.dasConfig = ha_config\n\n# Create the cluster\nhost_folder = dc.hostFolder\ncluster = host_folder.CreateClusterEx(name=cluster_name, spec=cluster_config)\n\n# Join hosts to the cluster\nfor host in esx:\n    dns_name = socket.gethostbyaddr(host['private_ip'])[0]\n    host_connect_spec = vim.host.ConnectSpec()\n    host_connect_spec.hostName = dns_name\n    host_connect_spec.userName = 'root'\n    host_connect_spec.password = host['password']\n    host_connect_spec.force = True\n    host_connect_spec.sslThumbprint = get_ssl_thumbprint(dns_name)\n    cluster.AddHost(spec=host_connect_spec, asConnected=True)\n",
            "template": "import json\nimport ipaddress\nimport os\nimport sys\nimport subprocess\nimport socket\nfrom time import sleep\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\n\n\ndef get_ssl_thumbprint(host_ip):\n    p1 = subprocess.Popen(('echo', '-n'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    p2 = subprocess.Popen(('openssl', 's_client', '-connect', '{0}:443'.format(host_ip)),\n                          stdin=p1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    p3 = subprocess.Popen(('openssl', 'x509', '-noout', '-fingerprint', '-sha1'),\n                          stdin=p2.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = p3.stdout.read()\n    ssl_thumbprint = out.split(b'=')[-1].strip()\n    return ssl_thumbprint.decode(\"utf-8\")\n\n\n# Vars from Terraform\nprivate_subnets = '${private_subnets}'\npublic_subnets = '${public_subnets}'\npublic_cidrs = '${public_cidrs}'\nesx_passwords = '${esx_passwords}'\nvcenter_username ='${vcenter_user}@${vcenter_domain}'\nsso_password = '${sso_password}'\ndc_name = '${dc_name}'\ncluster_name = '${cluster_name}'\nvcenter_network = '${vcenter_network}'\n\n# Parse TF Vars\nsubnets = json.loads(private_subnets)\npublic_subnets = json.loads(public_subnets)\npublic_cidrs = json.loads(public_cidrs)\nfor i in range(len(public_cidrs)):\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\nesx_passes = json.loads(esx_passwords)\nesx = []\nfor pw in esx_passes:\n    esx.append({\"password\": pw})\n\nfor subnet in subnets:\n    if subnet['vsphere_service_type'] == 'management':\n        esx_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[3].compressed\n        for i in range(len(esx)):\n            esx[i]['private_ip'] = list(ipaddress.ip_network(subnet['cidr']).hosts())[i + 3].compressed\n    if subnet['name'] == vcenter_network:\n        vcenter_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        gateway_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n        prefix_length = int(subnet['cidr'].split('/')[1])\n\nos.system(\"sed -i 's/__ESXI_IP__/{}/g' /root/vcva_template.json\".format(esx_ip))\nos.system(\"sed -i 's/__VCENTER_IP__/{}/g' /root/vcva_template.json\".format(vcenter_ip))\nos.system(\"sed -i 's/__VCENTER_GATEWAY__/{}/g' /root/vcva_template.json\".format(gateway_ip))\nos.system(\"sed -i 's/__VCENTER_PREFIX_LENGTH__/{}/g' /root/vcva_template.json\".format(prefix_length))\nos.system(\"/mnt/vcsa-cli-installer/lin64/vcsa-deploy install --accept-eula --acknowledge-ceip \"\n          \"--no-esx-ssl-verify /root/vcva_template.json\")\n\n# Connect to vCenter\nfor i in range(1, 30):\n    si = None\n    try:\n        si = connect.SmartConnectNoSSL(host=vcenter_ip, user=vcenter_username, pwd=sso_password, port=443)\n        break\n    except Exception:\n        sleep(10)\nif si == None:\n    print(\"Couldn't connect to vCenter!!!\")\n    sys.exit(1)\n\n# Create Datacenter in the root folder\nfolder = si.content.rootFolder\ndc = folder.CreateDatacenter(name=dc_name)\n\n# Create cluster config\ncluster_config = vim.cluster.ConfigSpecEx()\n\n# Create DRS config\ndrs_config=vim.cluster.DrsConfigInfo()\ndrs_config.enabled = True\ncluster_config.drsConfig=drs_config\n\n# Create vSan config\nvsan_config=vim.vsan.cluster.ConfigInfo()\nvsan_config.enabled = True\nvsan_config.defaultConfig = vim.vsan.cluster.ConfigInfo.HostDefaultInfo(\n                                autoClaimStorage = True\n                            )\ncluster_config.vsanConfig = vsan_config\n\n# Create HA config\nha_config = vim.cluster.DasConfigInfo()\nha_config.enabled = True\nha_config.hostMonitoring = vim.cluster.DasConfigInfo.ServiceState.enabled\nha_config.failoverLevel = 1\ncluster_config.dasConfig = ha_config\n\n# Create the cluster\nhost_folder = dc.hostFolder\ncluster = host_folder.CreateClusterEx(name=cluster_name, spec=cluster_config)\n\n# Join hosts to the cluster\nfor host in esx:\n    dns_name = socket.gethostbyaddr(host['private_ip'])[0]\n    host_connect_spec = vim.host.ConnectSpec()\n    host_connect_spec.hostName = dns_name\n    host_connect_spec.userName = 'root'\n    host_connect_spec.password = host['password']\n    host_connect_spec.force = True\n    host_connect_spec.sslThumbprint = get_ssl_thumbprint(dns_name)\n    cluster.AddHost(spec=host_connect_spec, asConnected=True)\n",
            "vars": {
              "cluster_name": "dc13-1",
              "dc_name": "Equinix Metal DC13",
              "esx_passwords": "[\"GGu]5Dd,s\\u0026\",\"w02\\u003e7DvUu[\",\"vK/7?3uD5=\"]",
              "private_subnets": "[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]",
              "public_cidrs": "[\"86.109.7.160/28\"]",
              "public_subnets": "[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]",
              "sso_password": "4!c1Dmu!?GVoZD9a",
              "vcenter_domain": "vsphere.local",
              "vcenter_network": "VM Public Net 1",
              "vcenter_user": "Administrator"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "download_vcenter",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "10ce7b746d0b1e992e98cf59a8e0382a7ac2723b439c6457cdbf6be25e82186e",
            "rendered": "#!/bin/bash\ncd /root/\ncurl -LO https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nmv mc /usr/local/bin/\nmc config host add s3 http://86.109.7.194:9000/ newminio newminio321\nmc cp s3/vmware/VMware-VCSA-all-7.0.1-17004997.iso .\nmc cp s3/vmware/vsanapiutils.py .\nmc cp s3/vmware/vsanmgmtObjects.py .\n\nmount /root/VMware-VCSA-all-7.0.1-17004997.iso /mnt/\n",
            "template": "#!/bin/bash\ncd /root/\ncurl -LO https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nmv mc /usr/local/bin/\nmc config host add s3 ${s3_url} ${s3_access_key} ${s3_secret_key}\nmc cp s3/${s3_bucket_name}/${vcenter_iso_name} .\nmc cp s3/${s3_bucket_name}/vsanapiutils.py .\nmc cp s3/${s3_bucket_name}/vsanmgmtObjects.py .\n\nmount /root/${vcenter_iso_name} /mnt/\n",
            "vars": {
              "s3_access_key": "newminio",
              "s3_bucket_name": "vmware",
              "s3_secret_key": "newminio321",
              "s3_url": "http://86.109.7.194:9000/",
              "vcenter_iso_name": "VMware-VCSA-all-7.0.1-17004997.iso"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "esx_host_networking",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fe35041b8532b46c0bf9e84d03f987b830cc3963c522e026a4b7c593b8bf5e28",
            "rendered": "import json\nimport ipaddress\nimport packet\nimport optparse\nimport sys\nfrom time import sleep\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\nfrom subprocess import Popen\n\n\n# Vars from Terraform\nprivate_subnets = '[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]'\nprivate_vlans = '[1074,1072,1073]'\npublic_subnets = '[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]'\npublic_vlans = '[1075]'\npublic_cidrs = '[\"86.109.7.160/28\"]'\ndomain_name = 'equinix-metal.local'\npacket_token = '6jxrxmJqWQ461ZkhqkNxsXZUPVe2eKYz'\n\n# Constants\nvswitch_name = 'vSwitch1'\ndel_vswitch_name = 'vSwitch0'\n\n# Build single subnet map with all vlans, cidrs, etc...\nsubnets = json.loads(private_subnets)\nprivate_vlans = json.loads(private_vlans)\npublic_subnets = json.loads(public_subnets)\npublic_vlans = json.loads(public_vlans)\npublic_cidrs = json.loads(public_cidrs)\n\nfor i in range(len(private_vlans)):\n    subnets[i]['vlan'] = private_vlans[i]\n\nfor i in range(len(public_vlans)):\n    public_subnets[i]['vlan'] = public_vlans[i]\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\n\n\nclass bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\ndef create_vswitch(host_network_system, vss_name, num_ports, nic_name, mtu):\n    vss_spec = vim.host.VirtualSwitch.Specification()\n    vss_spec.numPorts = num_ports\n    vss_spec.mtu = mtu\n    vss_spec.bridge = vim.host.VirtualSwitch.BondBridge(nicDevice=[nic_name])\n\n    host_network_system.AddVirtualSwitch(vswitchName=vss_name, spec=vss_spec)\n\n    print(\"Successfully created vSwitch \",  vss_name)\n\n\ndef create_port_group(host_network_system, pg_name, vss_name, vlan_id):\n    port_group_spec = vim.host.PortGroup.Specification()\n    port_group_spec.name = pg_name\n    port_group_spec.vlanId = vlan_id\n    port_group_spec.vswitchName = vss_name\n\n    security_policy = vim.host.NetworkPolicy.SecurityPolicy()\n    security_policy.allowPromiscuous = True\n    security_policy.forgedTransmits = True\n    security_policy.macChanges = True\n\n    port_group_spec.policy = vim.host.NetworkPolicy(security=security_policy)\n\n    host_network_system.AddPortGroup(portgrp=port_group_spec)\n\n    print(\"Successfully created PortGroup \",  pg_name)\n\n\ndef add_virtual_nic(host, host_network_system, pg_name, network_type, ip_address, subnet_mask, default_gateway,\n                    dns_servers, domain_name, mtu):\n    vnic_config = vim.host.VirtualNic.Specification()\n    ip_spec = vim.host.IpConfig()\n    if network_type == 'dhcp':\n        ip_spec.dhcp = True\n    else:\n        ip_spec.dhcp = False\n        ip_spec.ipAddress = ip_address\n        ip_spec.subnetMask = subnet_mask\n        if default_gateway:\n            vnic_config.ipRouteSpec = vim.host.VirtualNic.IpRouteSpec()\n            vnic_config.ipRouteSpec.ipRouteConfig = vim.host.IpRouteConfig()\n            vnic_config.ipRouteSpec.ipRouteConfig.defaultGateway = default_gateway\n            routespec = vim.host.IpRouteConfig()\n            routespec.defaultGateway = default_gateway\n            dns_config = host.configManager.networkSystem.dnsConfig\n            if len(dns_servers) \u003e 0:\n                dns_config.dhcp = False\n                dns_config.address = dns_servers\n                if domain_name:\n                    dns_config.domainName = domain_name\n                    dns_config.searchDomain = domain_name\n\n        else:\n            vnic_config.ipRouteSpec = vim.host.VirtualNic.IpRouteSpec()\n            vnic_config.ipRouteSpec.ipRouteConfig = vim.host.IpRouteConfig()\n\n    vnic_config.ip = ip_spec\n    vnic_config.mtu = mtu\n    virtual_nic = host_network_system.AddVirtualNic(portgroup=pg_name, nic=vnic_config)\n    if default_gateway:\n        host.configManager.networkSystem.UpdateIpRouteConfig(config=routespec)\n        host.configManager.networkSystem.UpdateDnsConfig(config=dns_config)\n\n    return(virtual_nic)\n\n\ndef enable_service_on_virtual_nic(host, virtual_nic, service_type):\n    if service_type == 'vsan':\n        vsan_port = vim.vsan.host.ConfigInfo.NetworkInfo.PortConfig(device=virtual_nic)\n        net_info = vim.vsan.host.ConfigInfo.NetworkInfo(port=[vsan_port])\n        vsan_config = vim.vsan.host.ConfigInfo(networkInfo=net_info,)\n        vsan_system = host.configManager.vsanSystem\n        try:\n            vsan_task = vsan_system.UpdateVsan_Task(vsan_config)\n        except Exception as e:\n            print(\"Failed to set service type to vsan: {}\".format(str(e)))\n    else:\n        host.configManager.virtualNicManager.SelectVnicForNicType(service_type, virtual_nic)\n\n\ndef connect_to_host(esx_host, esx_user, esx_pass):\n    for i in range(1, 30):\n        si = None\n        try:\n            print(\"Trying to connect to ESX Host . . .\")\n            si = connect.SmartConnectNoSSL(host=esx_host, user=esx_user, pwd=esx_pass, port=443)\n            break\n        except Exception:\n            print(\"There was a connection Error to host: {}. Sleeping 10 seconds and trying again.\".format(esx_host))\n            sleep(10)\n        if i == 30:\n            return None, None\n    print(\"Connected to ESX Host !\")\n    content = si.RetrieveContent()\n    host = content.viewManager.CreateContainerView(content.rootFolder, [vim.HostSystem], True).view[0]\n    return host, si\n\n\ndef main():\n    parser = optparse.OptionParser(usage=\"%prog --host \u003chost_ip\u003e --user \u003cusername\u003e --pass \u003cpassword\u003e \"\n                                   \"--id \u003cdevice_id\u003e --index \u003cterraform_index\u003e --ipRes \u003cip_reservation\u003e\")\n    parser.add_option('--host', dest=\"host\", action=\"store\", help=\"IP or FQDN of the ESXi host\")\n    parser.add_option('--user', dest=\"user\", action=\"store\", help=\"Username to authenticate to ESXi host\")\n    parser.add_option('--pass', dest=\"pw\", action=\"store\", help=\"Password to authenticarte to ESXi host\")\n    parser.add_option('--id', dest=\"id\", action=\"store\", help=\"Packet Device ID for Server\")\n    parser.add_option('--index', dest=\"index\", action=\"store\", help=\"Terraform index count, used for IPing\")\n    parser.add_option('--ipRes', dest=\"ipRes\", action=\"store\", help=\"IP reservation for /29 ip block\")\n\n    options, _ = parser.parse_args()\n    if not (options.host and options.user and options.pw and options.id and options.index and options.ipRes):\n        print(\"ERROR: Missing arguments\")\n        parser.print_usage()\n        sys.exit(1)\n    print(options)\n\n    host, si = connect_to_host(options.host, options.user, options.pw)\n    if si is None or host is None:\n        print(\"Couldn't connect to host: {} after 5 minutes. Skipping...\".format(options.host))\n        sys.exit(1)\n\n    host_name = host.name\n    host_network_system = host.configManager.networkSystem\n    online_pnics = []\n\n    for i in range(1, 6):\n        for pnic in host.config.network.pnic:\n            if pnic.linkSpeed:\n                online_pnics.append(pnic)\n        if len(online_pnics) \u003e= 1:\n            break\n        else:\n            print(\"Couldn't find a physical nic with a link speed. Sleeping 10 seconds and checking again.\")\n            sleep(10)\n\n    if len(online_pnics) \u003c= 0:\n        print(f\"{bcolors.FAIL}ERROR: Couldn't find a physical nic with a link speed for over 1 minute. Exiting!!!{bcolors.ENDC}\")\n        sys.exit(1)\n\n    for vswitch in host_network_system.networkInfo.vswitch:\n        for pnic in vswitch.pnic:\n            for n in range(len(online_pnics)):\n                if pnic == online_pnics[n].key:\n                    del online_pnics[n]\n                    break\n    \n    if len(online_pnics) \u003c= 0:\n        print(\"No additional uplink is active! Please email support@packet.com and tell them you think this server has a bad NIC!\")\n        sys.exit(1)\n\n    uplink = online_pnics[0].device\n    create_vswitch(host_network_system, vswitch_name, 1024, uplink, 9000)\n    for subnet in subnets:\n        create_port_group(host_network_system, subnet['name'], vswitch_name, subnet['vlan'])\n        if subnet['vsphere_service_type']:\n            ip_address = list(ipaddress.ip_network(subnet['cidr']).hosts())[int(options.index) + 3].compressed\n            subnet_mask = ipaddress.ip_network(subnet['cidr']).netmask.compressed\n            default_gateway = None\n            mtu = 9000\n            if subnet['vsphere_service_type'] == 'management':\n                create_port_group(host_network_system, \"Management\", vswitch_name, subnet['vlan'])\n                default_gateway = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n                dns_servers = []\n                dns_servers.append(default_gateway)\n                dns_servers.append('8.8.8.8')\n                mtu = 1500\n                new_ip = ip_address\n\n                # Reserve IP in dnsmasq\n                dnsmasq_conf = open('/etc/dnsmasq.d/dhcp.conf', 'a+')\n                dnsmasq_conf.write(\"dhcp-host=00:00:00:00:00:0{}, {} # {} IP\\n\".format(int(options.index),\n                                                                                       ip_address,\n                                                                                       host_name))\n                dnsmasq_conf.close()\n\n                # DNS record for ESX_Host\n                etc_hosts = open('/etc/hosts', 'a+')\n                etc_hosts.write('{}\\t{}\\t{}.{}\\n'.format(ip_address, host_name, host_name, domain_name))\n                etc_hosts.close()\n                # Restart dnsmasq service\n                Popen([\"systemctl restart dnsmasq\"], shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)\n                virtual_nic = add_virtual_nic(host, host_network_system, \"Management\", 'static', ip_address,\n                                          subnet_mask, default_gateway, dns_servers, domain_name, mtu)\n            else:\n                virtual_nic = add_virtual_nic(host, host_network_system, subnet['name'], 'static', ip_address,\n                                              subnet_mask, \"\", \"\", \"\", mtu)\n            enable_service_on_virtual_nic(host, virtual_nic, subnet['vsphere_service_type'])\n    connect.Disconnect(si)\n\n    host = None\n    si = None\n    host, si = connect_to_host(new_ip, options.user, options.pw)\n    if si is None or host is None:\n        print(\"Couldn't connect to host: {}\".format(new_ip))\n        sys.exit(1)\n\n    host_network_system = host.configManager.networkSystem\n    active_uplinks = []\n    backup_uplinks = []\n    for vnic in host_network_system.networkInfo.vnic:\n        if vnic.spec.ip.ipAddress == options.host or vnic.spec.ip.ipAddress[:3] == '10.':\n            print(\"Removing vNic: {}\".format(vnic.device))\n            host_network_system.RemoveVirtualNic(vnic.device)\n    for vswitch in host_network_system.networkInfo.vswitch:\n        if vswitch.name == del_vswitch_name:\n            for uplink in vswitch.spec.bridge.nicDevice:\n                active_uplinks.append(uplink)\n            for pgroup in vswitch.portgroup:\n                print(\"Removing Port Group: {}\".format(pgroup[23:]))\n                host_network_system.RemovePortGroup(pgroup[23:])\n        if vswitch.name == vswitch_name:\n            vss_spec = vswitch.spec\n            for uplink in vss_spec.bridge.nicDevice:\n                backup_uplinks.append(uplink)\n\n    print(\"Removing vSwitch: {}\".format(del_vswitch_name))\n    host_network_system.RemoveVirtualSwitch(del_vswitch_name)\n\n    print(\"Updating vSwitch Uplinks...\")\n    str_active_uplinks = \",\".join(map(str, active_uplinks))\n    str_backup_uplinks = \",\".join(map(str, backup_uplinks))\n    cmd_str = \"python3 /root/update_uplinks.py --host '{}' --user '{}' --pass '{}' --vswitch '{}' --active-uplinks '{}' --backup-uplinks '{}'\".format(\n                                            new_ip, options.user, options.pw, vswitch_name, str_active_uplinks, str_backup_uplinks)\n    Popen([cmd_str], shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)\n\n    # Get Packet Deivce\n    manager = packet.Manager(auth_token=packet_token)\n    device = manager.get_device(options.id)\n    for port in device.network_ports:\n        if port['type'] == 'NetworkBondPort':\n            print(\"Found {} port id\".format(port['name']))\n            bond_port = port['id']\n        elif port['type'] == 'NetworkPort' and not port['data']['bonded']:\n            print(\"Found {} port id\".format(port['name']))\n            unbonded_port = port['id']\n        else:\n            print(\"Found {} port id, but...\".format(port['name']))\n            print(\"This is not the port you're looking for...\")\n\n    for subnet in subnets:\n        print(\"Removing vLan {} from unbonded port\".format(subnet['vlan']))\n        attempt = 0\n        for attempt in range(1,5):\n            try:\n                manager.remove_port(unbonded_port, subnet['vlan'])\n                break\n            except Exception:\n                if attempt == 5:\n                    print(\"Tried to remove vLan five times and failed. Exiting...\")\n                    sys.exit(1)\n                print(\"Failed to remove vlan, trying again...\")\n                sleep(5)\n    print(\"Rebonding Ports...\")\n    attempt = 0\n    for attempt in range(1,5):\n        try:\n            manager.bond_ports(bond_port, True)\n            break\n        except Exception:\n            if attempt == 5:\n                print(\"Tried to bond ports five times and failed. Exiting...\")\n                sys.exit(1)\n            print(\"Failed to bond ports, trying again...\")\n            sleep(5)\n    for n in range(len(subnets)):\n        if n == 0:\n            print(\"Adding vLan {} to bond\".format(subnets[n]['vlan']))\n            attempt = 0\n            for attempt in range(1,5):\n                try:\n                    manager.convert_layer_2(bond_port, subnets[n]['vlan'])\n                    break\n                except Exception:\n                    if attempt == 5:\n                        print(\"Tried to convert bond to Layer 2 five times and failed. Exiting...\")\n                        sys.exit(1)\n                    print(\"Failed to convert bond to Layer 2, trying again...\")\n                    sleep(5)\n        else:\n            print(\"Adding vLan {} to bond\".format(subnets[n]['vlan']))\n            attempt = 0\n            for attempt in range(1,5):\n                try:\n                    manager.assign_port(bond_port, subnets[n]['vlan'])\n                    break\n                except Exception:\n                    if attempt == 5:\n                        print(\"Tried to add vLan to bond five times and failed. Exiting...\")\n                        sys.exit(1)\n                    print(\"Failed to add vLan to bond, trying again...\")\n                    sleep(5)\n    # Clean up IP Reservations\n    manager.delete_ip(options.ipRes)\n\n# Start program\nif __name__ == \"__main__\":\n    main()\n",
            "template": "import json\nimport ipaddress\nimport packet\nimport optparse\nimport sys\nfrom time import sleep\nfrom pyVmomi import vim, vmodl\nfrom pyVim import connect\nfrom subprocess import Popen\n\n\n# Vars from Terraform\nprivate_subnets = '${private_subnets}'\nprivate_vlans = '${private_vlans}'\npublic_subnets = '${public_subnets}'\npublic_vlans = '${public_vlans}'\npublic_cidrs = '${public_cidrs}'\ndomain_name = '${domain_name}'\npacket_token = '${packet_token}'\n\n# Constants\nvswitch_name = 'vSwitch1'\ndel_vswitch_name = 'vSwitch0'\n\n# Build single subnet map with all vlans, cidrs, etc...\nsubnets = json.loads(private_subnets)\nprivate_vlans = json.loads(private_vlans)\npublic_subnets = json.loads(public_subnets)\npublic_vlans = json.loads(public_vlans)\npublic_cidrs = json.loads(public_cidrs)\n\nfor i in range(len(private_vlans)):\n    subnets[i]['vlan'] = private_vlans[i]\n\nfor i in range(len(public_vlans)):\n    public_subnets[i]['vlan'] = public_vlans[i]\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\n\n\nclass bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\ndef create_vswitch(host_network_system, vss_name, num_ports, nic_name, mtu):\n    vss_spec = vim.host.VirtualSwitch.Specification()\n    vss_spec.numPorts = num_ports\n    vss_spec.mtu = mtu\n    vss_spec.bridge = vim.host.VirtualSwitch.BondBridge(nicDevice=[nic_name])\n\n    host_network_system.AddVirtualSwitch(vswitchName=vss_name, spec=vss_spec)\n\n    print(\"Successfully created vSwitch \",  vss_name)\n\n\ndef create_port_group(host_network_system, pg_name, vss_name, vlan_id):\n    port_group_spec = vim.host.PortGroup.Specification()\n    port_group_spec.name = pg_name\n    port_group_spec.vlanId = vlan_id\n    port_group_spec.vswitchName = vss_name\n\n    security_policy = vim.host.NetworkPolicy.SecurityPolicy()\n    security_policy.allowPromiscuous = True\n    security_policy.forgedTransmits = True\n    security_policy.macChanges = True\n\n    port_group_spec.policy = vim.host.NetworkPolicy(security=security_policy)\n\n    host_network_system.AddPortGroup(portgrp=port_group_spec)\n\n    print(\"Successfully created PortGroup \",  pg_name)\n\n\ndef add_virtual_nic(host, host_network_system, pg_name, network_type, ip_address, subnet_mask, default_gateway,\n                    dns_servers, domain_name, mtu):\n    vnic_config = vim.host.VirtualNic.Specification()\n    ip_spec = vim.host.IpConfig()\n    if network_type == 'dhcp':\n        ip_spec.dhcp = True\n    else:\n        ip_spec.dhcp = False\n        ip_spec.ipAddress = ip_address\n        ip_spec.subnetMask = subnet_mask\n        if default_gateway:\n            vnic_config.ipRouteSpec = vim.host.VirtualNic.IpRouteSpec()\n            vnic_config.ipRouteSpec.ipRouteConfig = vim.host.IpRouteConfig()\n            vnic_config.ipRouteSpec.ipRouteConfig.defaultGateway = default_gateway\n            routespec = vim.host.IpRouteConfig()\n            routespec.defaultGateway = default_gateway\n            dns_config = host.configManager.networkSystem.dnsConfig\n            if len(dns_servers) \u003e 0:\n                dns_config.dhcp = False\n                dns_config.address = dns_servers\n                if domain_name:\n                    dns_config.domainName = domain_name\n                    dns_config.searchDomain = domain_name\n\n        else:\n            vnic_config.ipRouteSpec = vim.host.VirtualNic.IpRouteSpec()\n            vnic_config.ipRouteSpec.ipRouteConfig = vim.host.IpRouteConfig()\n\n    vnic_config.ip = ip_spec\n    vnic_config.mtu = mtu\n    virtual_nic = host_network_system.AddVirtualNic(portgroup=pg_name, nic=vnic_config)\n    if default_gateway:\n        host.configManager.networkSystem.UpdateIpRouteConfig(config=routespec)\n        host.configManager.networkSystem.UpdateDnsConfig(config=dns_config)\n\n    return(virtual_nic)\n\n\ndef enable_service_on_virtual_nic(host, virtual_nic, service_type):\n    if service_type == 'vsan':\n        vsan_port = vim.vsan.host.ConfigInfo.NetworkInfo.PortConfig(device=virtual_nic)\n        net_info = vim.vsan.host.ConfigInfo.NetworkInfo(port=[vsan_port])\n        vsan_config = vim.vsan.host.ConfigInfo(networkInfo=net_info,)\n        vsan_system = host.configManager.vsanSystem\n        try:\n            vsan_task = vsan_system.UpdateVsan_Task(vsan_config)\n        except Exception as e:\n            print(\"Failed to set service type to vsan: {}\".format(str(e)))\n    else:\n        host.configManager.virtualNicManager.SelectVnicForNicType(service_type, virtual_nic)\n\n\ndef connect_to_host(esx_host, esx_user, esx_pass):\n    for i in range(1, 30):\n        si = None\n        try:\n            print(\"Trying to connect to ESX Host . . .\")\n            si = connect.SmartConnectNoSSL(host=esx_host, user=esx_user, pwd=esx_pass, port=443)\n            break\n        except Exception:\n            print(\"There was a connection Error to host: {}. Sleeping 10 seconds and trying again.\".format(esx_host))\n            sleep(10)\n        if i == 30:\n            return None, None\n    print(\"Connected to ESX Host !\")\n    content = si.RetrieveContent()\n    host = content.viewManager.CreateContainerView(content.rootFolder, [vim.HostSystem], True).view[0]\n    return host, si\n\n\ndef main():\n    parser = optparse.OptionParser(usage=\"%prog --host \u003chost_ip\u003e --user \u003cusername\u003e --pass \u003cpassword\u003e \"\n                                   \"--id \u003cdevice_id\u003e --index \u003cterraform_index\u003e --ipRes \u003cip_reservation\u003e\")\n    parser.add_option('--host', dest=\"host\", action=\"store\", help=\"IP or FQDN of the ESXi host\")\n    parser.add_option('--user', dest=\"user\", action=\"store\", help=\"Username to authenticate to ESXi host\")\n    parser.add_option('--pass', dest=\"pw\", action=\"store\", help=\"Password to authenticarte to ESXi host\")\n    parser.add_option('--id', dest=\"id\", action=\"store\", help=\"Packet Device ID for Server\")\n    parser.add_option('--index', dest=\"index\", action=\"store\", help=\"Terraform index count, used for IPing\")\n    parser.add_option('--ipRes', dest=\"ipRes\", action=\"store\", help=\"IP reservation for /29 ip block\")\n\n    options, _ = parser.parse_args()\n    if not (options.host and options.user and options.pw and options.id and options.index and options.ipRes):\n        print(\"ERROR: Missing arguments\")\n        parser.print_usage()\n        sys.exit(1)\n    print(options)\n\n    host, si = connect_to_host(options.host, options.user, options.pw)\n    if si is None or host is None:\n        print(\"Couldn't connect to host: {} after 5 minutes. Skipping...\".format(options.host))\n        sys.exit(1)\n\n    host_name = host.name\n    host_network_system = host.configManager.networkSystem\n    online_pnics = []\n\n    for i in range(1, 6):\n        for pnic in host.config.network.pnic:\n            if pnic.linkSpeed:\n                online_pnics.append(pnic)\n        if len(online_pnics) \u003e= 1:\n            break\n        else:\n            print(\"Couldn't find a physical nic with a link speed. Sleeping 10 seconds and checking again.\")\n            sleep(10)\n\n    if len(online_pnics) \u003c= 0:\n        print(f\"{bcolors.FAIL}ERROR: Couldn't find a physical nic with a link speed for over 1 minute. Exiting!!!{bcolors.ENDC}\")\n        sys.exit(1)\n\n    for vswitch in host_network_system.networkInfo.vswitch:\n        for pnic in vswitch.pnic:\n            for n in range(len(online_pnics)):\n                if pnic == online_pnics[n].key:\n                    del online_pnics[n]\n                    break\n    \n    if len(online_pnics) \u003c= 0:\n        print(\"No additional uplink is active! Please email support@packet.com and tell them you think this server has a bad NIC!\")\n        sys.exit(1)\n\n    uplink = online_pnics[0].device\n    create_vswitch(host_network_system, vswitch_name, 1024, uplink, 9000)\n    for subnet in subnets:\n        create_port_group(host_network_system, subnet['name'], vswitch_name, subnet['vlan'])\n        if subnet['vsphere_service_type']:\n            ip_address = list(ipaddress.ip_network(subnet['cidr']).hosts())[int(options.index) + 3].compressed\n            subnet_mask = ipaddress.ip_network(subnet['cidr']).netmask.compressed\n            default_gateway = None\n            mtu = 9000\n            if subnet['vsphere_service_type'] == 'management':\n                create_port_group(host_network_system, \"Management\", vswitch_name, subnet['vlan'])\n                default_gateway = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n                dns_servers = []\n                dns_servers.append(default_gateway)\n                dns_servers.append('8.8.8.8')\n                mtu = 1500\n                new_ip = ip_address\n\n                # Reserve IP in dnsmasq\n                dnsmasq_conf = open('/etc/dnsmasq.d/dhcp.conf', 'a+')\n                dnsmasq_conf.write(\"dhcp-host=00:00:00:00:00:0{}, {} # {} IP\\n\".format(int(options.index),\n                                                                                       ip_address,\n                                                                                       host_name))\n                dnsmasq_conf.close()\n\n                # DNS record for ESX_Host\n                etc_hosts = open('/etc/hosts', 'a+')\n                etc_hosts.write('{}\\t{}\\t{}.{}\\n'.format(ip_address, host_name, host_name, domain_name))\n                etc_hosts.close()\n                # Restart dnsmasq service\n                Popen([\"systemctl restart dnsmasq\"], shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)\n                virtual_nic = add_virtual_nic(host, host_network_system, \"Management\", 'static', ip_address,\n                                          subnet_mask, default_gateway, dns_servers, domain_name, mtu)\n            else:\n                virtual_nic = add_virtual_nic(host, host_network_system, subnet['name'], 'static', ip_address,\n                                              subnet_mask, \"\", \"\", \"\", mtu)\n            enable_service_on_virtual_nic(host, virtual_nic, subnet['vsphere_service_type'])\n    connect.Disconnect(si)\n\n    host = None\n    si = None\n    host, si = connect_to_host(new_ip, options.user, options.pw)\n    if si is None or host is None:\n        print(\"Couldn't connect to host: {}\".format(new_ip))\n        sys.exit(1)\n\n    host_network_system = host.configManager.networkSystem\n    active_uplinks = []\n    backup_uplinks = []\n    for vnic in host_network_system.networkInfo.vnic:\n        if vnic.spec.ip.ipAddress == options.host or vnic.spec.ip.ipAddress[:3] == '10.':\n            print(\"Removing vNic: {}\".format(vnic.device))\n            host_network_system.RemoveVirtualNic(vnic.device)\n    for vswitch in host_network_system.networkInfo.vswitch:\n        if vswitch.name == del_vswitch_name:\n            for uplink in vswitch.spec.bridge.nicDevice:\n                active_uplinks.append(uplink)\n            for pgroup in vswitch.portgroup:\n                print(\"Removing Port Group: {}\".format(pgroup[23:]))\n                host_network_system.RemovePortGroup(pgroup[23:])\n        if vswitch.name == vswitch_name:\n            vss_spec = vswitch.spec\n            for uplink in vss_spec.bridge.nicDevice:\n                backup_uplinks.append(uplink)\n\n    print(\"Removing vSwitch: {}\".format(del_vswitch_name))\n    host_network_system.RemoveVirtualSwitch(del_vswitch_name)\n\n    print(\"Updating vSwitch Uplinks...\")\n    str_active_uplinks = \",\".join(map(str, active_uplinks))\n    str_backup_uplinks = \",\".join(map(str, backup_uplinks))\n    cmd_str = \"python3 /root/update_uplinks.py --host '{}' --user '{}' --pass '{}' --vswitch '{}' --active-uplinks '{}' --backup-uplinks '{}'\".format(\n                                            new_ip, options.user, options.pw, vswitch_name, str_active_uplinks, str_backup_uplinks)\n    Popen([cmd_str], shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)\n\n    # Get Packet Deivce\n    manager = packet.Manager(auth_token=packet_token)\n    device = manager.get_device(options.id)\n    for port in device.network_ports:\n        if port['type'] == 'NetworkBondPort':\n            print(\"Found {} port id\".format(port['name']))\n            bond_port = port['id']\n        elif port['type'] == 'NetworkPort' and not port['data']['bonded']:\n            print(\"Found {} port id\".format(port['name']))\n            unbonded_port = port['id']\n        else:\n            print(\"Found {} port id, but...\".format(port['name']))\n            print(\"This is not the port you're looking for...\")\n\n    for subnet in subnets:\n        print(\"Removing vLan {} from unbonded port\".format(subnet['vlan']))\n        attempt = 0\n        for attempt in range(1,5):\n            try:\n                manager.remove_port(unbonded_port, subnet['vlan'])\n                break\n            except Exception:\n                if attempt == 5:\n                    print(\"Tried to remove vLan five times and failed. Exiting...\")\n                    sys.exit(1)\n                print(\"Failed to remove vlan, trying again...\")\n                sleep(5)\n    print(\"Rebonding Ports...\")\n    attempt = 0\n    for attempt in range(1,5):\n        try:\n            manager.bond_ports(bond_port, True)\n            break\n        except Exception:\n            if attempt == 5:\n                print(\"Tried to bond ports five times and failed. Exiting...\")\n                sys.exit(1)\n            print(\"Failed to bond ports, trying again...\")\n            sleep(5)\n    for n in range(len(subnets)):\n        if n == 0:\n            print(\"Adding vLan {} to bond\".format(subnets[n]['vlan']))\n            attempt = 0\n            for attempt in range(1,5):\n                try:\n                    manager.convert_layer_2(bond_port, subnets[n]['vlan'])\n                    break\n                except Exception:\n                    if attempt == 5:\n                        print(\"Tried to convert bond to Layer 2 five times and failed. Exiting...\")\n                        sys.exit(1)\n                    print(\"Failed to convert bond to Layer 2, trying again...\")\n                    sleep(5)\n        else:\n            print(\"Adding vLan {} to bond\".format(subnets[n]['vlan']))\n            attempt = 0\n            for attempt in range(1,5):\n                try:\n                    manager.assign_port(bond_port, subnets[n]['vlan'])\n                    break\n                except Exception:\n                    if attempt == 5:\n                        print(\"Tried to add vLan to bond five times and failed. Exiting...\")\n                        sys.exit(1)\n                    print(\"Failed to add vLan to bond, trying again...\")\n                    sleep(5)\n    # Clean up IP Reservations\n    manager.delete_ip(options.ipRes)\n\n# Start program\nif __name__ == \"__main__\":\n    main()\n",
            "vars": {
              "domain_name": "equinix-metal.local",
              "packet_token": "6jxrxmJqWQ461ZkhqkNxsXZUPVe2eKYz",
              "private_subnets": "[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]",
              "private_vlans": "[1074,1072,1073]",
              "public_cidrs": "[\"86.109.7.160/28\"]",
              "public_subnets": "[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]",
              "public_vlans": "[1075]"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9ac5b41d622b5a1f83982563b43b6749617d8cebd01d6a774bd1b0e808493b88",
            "rendered": "#!/usr/bin/python3\nimport json\nimport apt\nimport os\nimport ipaddress\nimport urllib.request as urllib2\nimport random\n\n# Vars from Terraform\nprivate_subnets = '[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]'\nprivate_vlans = '[1074,1072,1073]'\npublic_subnets = '[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]'\npublic_vlans = '[1075]'\npublic_cidrs = '[\"86.109.7.160/28\"]'\ndomain_name = 'equinix-metal.local'\n\n\ndef words_list():\n    word_site = \"https://raw.githubusercontent.com/taikuukaits/SimpleWordlists/master/Wordlist-Nouns-Common-Audited-Len-3-6.txt\"\n    response = urllib2.urlopen(word_site)\n    word_list = response.read().splitlines()\n    words = []\n    for word in word_list:\n        if 4 \u003c= len(word) \u003c= 5:\n            words.append(word.decode().lower())\n    return words\n\n\n# Get random word list\nwords = words_list()\n\n# Allow\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v4 boolean true' | sudo debconf-set-selections\")\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v6 boolean true' | sudo debconf-set-selections\")\n\n# Disable systemd-resolved\nos.system(\"systemctl stop systemd-resolved\")\nos.system(\"systemctl disable systemd-resolved\")\n\n# Install Apt Packages\nos.system('DEBIAN_FRONTEND=noninteractive apt-get update -y')\nos.system('DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::=\"--force-confold\" --force-yes -y dnsmasq vlan iptables-persistent conntrack python3-pip')\n\n# Build single subnet map with all vlans, cidrs, etc...\nsubnets = json.loads(private_subnets)\nprivate_vlans = json.loads(private_vlans)\npublic_subnets = json.loads(public_subnets)\npublic_vlans = json.loads(public_vlans)\npublic_cidrs = json.loads(public_cidrs)\n\nfor i in range(0, len(private_vlans)):\n    subnets[i]['vlan'] = private_vlans[i]\n\nfor i in range(0, len(public_vlans)):\n    public_subnets[i]['vlan'] = public_vlans[i]\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\n\n# Wipe second Network Interface from config file\nreadFile = open(\"/etc/network/interfaces\")\nlines = readFile.readlines()\nreadFile.close()\nfor line in reversed(lines):\n    if \"auto\" in line:\n        split_line = line.split()\n        interface = split_line[-1]\n        break\nlines = lines[:-5]\n\n# Ensure 8021q and remove the second interface from the bond\nos.system(\"modprobe 8021q\")\nos.system(\"ifdown {}\".format(interface))\n\n# Make sure 8021q is loaded at startup\nmodules_file = open(\"/etc/modules-load.d/modules.conf\", \"a+\")\nmodules_file.write(\"\\n8021q\\n\")\nmodules_file.close()\n\n# Setup syctl parameters for routing\nsysctl_file = open(\"/etc/sysctl.conf\", \"a+\")\nsysctl_file.write(\"\\n\\n#Routing parameters\\n\")\nsysctl_file.write(\"net.ipv4.conf.all.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.conf.default.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.ip_forward=1\\n\")\nsysctl_file.write(\"net.ipv4.tcp_mtu_probing=2\\n\")\nsysctl_file.close()\n\n# Apply sysctl parameters\nos.system(\"sysctl -p\")\n\n# Remove old conf for second interface\ninterface_file = open('/etc/network/interfaces', 'w')\nfor line in lines:\n    interface_file.write(line)\n\n# Add new conf for second physical interface\ninterface_file.write(\"\\nauto {}\\n\".format(interface))\ninterface_file.write(\"iface {} inet manual\\n\".format(interface))\ninterface_file.write(\"\\tmtu 9000\\n\")\n\n# Open dnsmasq config for writing\ndnsmasq_conf = open('/etc/dnsmasq.d/dhcp.conf', 'w')\n\n# Loop though all subnets and setup Interfaces, DNSMasq, \u0026 IPTables\nfor subnet in subnets:\n    if subnet['routable']:\n        # Find vCenter IP\n        if subnet['vsphere_service_type'] == 'management':\n            vcenter_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        # Gather network facts about this subnet\n        router_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n        low_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        high_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[-1].compressed\n        netmask = ipaddress.ip_network(subnet['cidr']).netmask.compressed\n\n        # Setup vLan interface for this subnet\n        interface_file.write(\"\\nauto {}.{}\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"iface {}.{} inet static\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"\\taddress {}\\n\".format(router_ip))\n        interface_file.write(\"\\tnetmask {}\\n\".format(netmask))\n        interface_file.write(\"\\tvlan-raw-device {}\\n\".format(interface))\n        interface_file.write(\"\\tmtu 9000\\n\")\n\n        # Generate random name for the network\n        word = random.choice(words)\n        words.remove(word)\n\n        # Write dnsmasq dhcp scopes\n        dnsmasq_conf.write(\"dhcp-range=set:{},{},{},2h\\n\".format(word, low_ip, high_ip))\n        dnsmasq_conf.write(\"dhcp-option=tag:{},option:router,{}\\n\".format(word, router_ip))\n\n        # Create NAT rule for this network if the network is tagged as NAT\n        if subnet['nat']:\n            os.system(\"iptables -t nat -A POSTROUTING -o bond0 -j MASQUERADE -s {}\".format(subnet['cidr']))\n\ninterface_file.close()\n\n# Reserver the vCenter IP\ndnsmasq_conf.write(\"\\ndhcp-host=00:00:00:00:00:99, {} # vCenter IP\\n\".format(vcenter_ip))\n\ndnsmasq_conf.close()\n\n# DNS record for vCenter\netc_hosts = open('/etc/hosts', 'a+')\netc_hosts.write('\\n{}\\tvcva\\tvcva.{}\\n'.format(vcenter_ip, domain_name))\netc_hosts.close()\n\n# Add domain to host\nresolv_conf = open('/etc/resolv.conf', 'a+')\nresolv_conf.write('\\ndomain {}\\nsearch {}\\n'.format(domain_name, domain_name))\nresolv_conf.close()\n\n# Block DNSMasq out the WAN\nos.system(\"iptables -I INPUT -p udp --dport 67 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p udp --dport 53 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p tcp --dport 53 -i bond0 -j DROP\")\n\n# Bring up newly configured interfaces\nos.system(\"ifup --all\")\n\n# Remove a saftey measure from dnsmasq that blocks VPN users from using DNS\nos.system(\"sed -i 's/ --local-service//g' /etc/init.d/dnsmasq\")\n\n# Restart dnsmasq service\nos.system(\"systemctl restart dnsmasq\")\n\n# Save iptables rules\nos.system(\"iptables-save \u003e /etc/iptables/rules.v4\")\n\n# Install python modules\nos.system(\"pip3 install --upgrade pip pyvmomi packet-python\")\n",
            "template": "#!/usr/bin/python3\nimport json\nimport apt\nimport os\nimport ipaddress\nimport urllib.request as urllib2\nimport random\n\n# Vars from Terraform\nprivate_subnets = '${private_subnets}'\nprivate_vlans = '${private_vlans}'\npublic_subnets = '${public_subnets}'\npublic_vlans = '${public_vlans}'\npublic_cidrs = '${public_cidrs}'\ndomain_name = '${domain_name}'\n\n\ndef words_list():\n    word_site = \"https://raw.githubusercontent.com/taikuukaits/SimpleWordlists/master/Wordlist-Nouns-Common-Audited-Len-3-6.txt\"\n    response = urllib2.urlopen(word_site)\n    word_list = response.read().splitlines()\n    words = []\n    for word in word_list:\n        if 4 \u003c= len(word) \u003c= 5:\n            words.append(word.decode().lower())\n    return words\n\n\n# Get random word list\nwords = words_list()\n\n# Allow\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v4 boolean true' | sudo debconf-set-selections\")\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v6 boolean true' | sudo debconf-set-selections\")\n\n# Disable systemd-resolved\nos.system(\"systemctl stop systemd-resolved\")\nos.system(\"systemctl disable systemd-resolved\")\n\n# Install Apt Packages\nos.system('DEBIAN_FRONTEND=noninteractive apt-get update -y')\nos.system('DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::=\"--force-confold\" --force-yes -y dnsmasq vlan iptables-persistent conntrack python3-pip')\n\n# Build single subnet map with all vlans, cidrs, etc...\nsubnets = json.loads(private_subnets)\nprivate_vlans = json.loads(private_vlans)\npublic_subnets = json.loads(public_subnets)\npublic_vlans = json.loads(public_vlans)\npublic_cidrs = json.loads(public_cidrs)\n\nfor i in range(0, len(private_vlans)):\n    subnets[i]['vlan'] = private_vlans[i]\n\nfor i in range(0, len(public_vlans)):\n    public_subnets[i]['vlan'] = public_vlans[i]\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\n\n# Wipe second Network Interface from config file\nreadFile = open(\"/etc/network/interfaces\")\nlines = readFile.readlines()\nreadFile.close()\nfor line in reversed(lines):\n    if \"auto\" in line:\n        split_line = line.split()\n        interface = split_line[-1]\n        break\nlines = lines[:-5]\n\n# Ensure 8021q and remove the second interface from the bond\nos.system(\"modprobe 8021q\")\nos.system(\"ifdown {}\".format(interface))\n\n# Make sure 8021q is loaded at startup\nmodules_file = open(\"/etc/modules-load.d/modules.conf\", \"a+\")\nmodules_file.write(\"\\n8021q\\n\")\nmodules_file.close()\n\n# Setup syctl parameters for routing\nsysctl_file = open(\"/etc/sysctl.conf\", \"a+\")\nsysctl_file.write(\"\\n\\n#Routing parameters\\n\")\nsysctl_file.write(\"net.ipv4.conf.all.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.conf.default.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.ip_forward=1\\n\")\nsysctl_file.write(\"net.ipv4.tcp_mtu_probing=2\\n\")\nsysctl_file.close()\n\n# Apply sysctl parameters\nos.system(\"sysctl -p\")\n\n# Remove old conf for second interface\ninterface_file = open('/etc/network/interfaces', 'w')\nfor line in lines:\n    interface_file.write(line)\n\n# Add new conf for second physical interface\ninterface_file.write(\"\\nauto {}\\n\".format(interface))\ninterface_file.write(\"iface {} inet manual\\n\".format(interface))\ninterface_file.write(\"\\tmtu 9000\\n\")\n\n# Open dnsmasq config for writing\ndnsmasq_conf = open('/etc/dnsmasq.d/dhcp.conf', 'w')\n\n# Loop though all subnets and setup Interfaces, DNSMasq, \u0026 IPTables\nfor subnet in subnets:\n    if subnet['routable']:\n        # Find vCenter IP\n        if subnet['vsphere_service_type'] == 'management':\n            vcenter_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        # Gather network facts about this subnet\n        router_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n        low_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        high_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[-1].compressed\n        netmask = ipaddress.ip_network(subnet['cidr']).netmask.compressed\n\n        # Setup vLan interface for this subnet\n        interface_file.write(\"\\nauto {}.{}\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"iface {}.{} inet static\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"\\taddress {}\\n\".format(router_ip))\n        interface_file.write(\"\\tnetmask {}\\n\".format(netmask))\n        interface_file.write(\"\\tvlan-raw-device {}\\n\".format(interface))\n        interface_file.write(\"\\tmtu 9000\\n\")\n\n        # Generate random name for the network\n        word = random.choice(words)\n        words.remove(word)\n\n        # Write dnsmasq dhcp scopes\n        dnsmasq_conf.write(\"dhcp-range=set:{},{},{},2h\\n\".format(word, low_ip, high_ip))\n        dnsmasq_conf.write(\"dhcp-option=tag:{},option:router,{}\\n\".format(word, router_ip))\n\n        # Create NAT rule for this network if the network is tagged as NAT\n        if subnet['nat']:\n            os.system(\"iptables -t nat -A POSTROUTING -o bond0 -j MASQUERADE -s {}\".format(subnet['cidr']))\n\ninterface_file.close()\n\n# Reserver the vCenter IP\ndnsmasq_conf.write(\"\\ndhcp-host=00:00:00:00:00:99, {} # vCenter IP\\n\".format(vcenter_ip))\n\ndnsmasq_conf.close()\n\n# DNS record for vCenter\netc_hosts = open('/etc/hosts', 'a+')\netc_hosts.write('\\n{}\\tvcva\\tvcva.{}\\n'.format(vcenter_ip, domain_name))\netc_hosts.close()\n\n# Add domain to host\nresolv_conf = open('/etc/resolv.conf', 'a+')\nresolv_conf.write('\\ndomain {}\\nsearch {}\\n'.format(domain_name, domain_name))\nresolv_conf.close()\n\n# Block DNSMasq out the WAN\nos.system(\"iptables -I INPUT -p udp --dport 67 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p udp --dport 53 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p tcp --dport 53 -i bond0 -j DROP\")\n\n# Bring up newly configured interfaces\nos.system(\"ifup --all\")\n\n# Remove a saftey measure from dnsmasq that blocks VPN users from using DNS\nos.system(\"sed -i 's/ --local-service//g' /etc/init.d/dnsmasq\")\n\n# Restart dnsmasq service\nos.system(\"systemctl restart dnsmasq\")\n\n# Save iptables rules\nos.system(\"iptables-save \u003e /etc/iptables/rules.v4\")\n\n# Install python modules\nos.system(\"pip3 install --upgrade pip pyvmomi packet-python\")\n",
            "vars": {
              "domain_name": "equinix-metal.local",
              "private_subnets": "[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]",
              "private_vlans": "[1074,1072,1073]",
              "public_cidrs": "[\"86.109.7.160/28\"]",
              "public_subnets": "[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]",
              "public_vlans": "[1075]"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "vcva_template",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2081701941ab3fb5dfeeaf7ad9444e984b6e15d113f59756c8fd30bc37764fb3",
            "rendered": "{\n  \"__version\": \"2.13.0\",\n  \"new_vcsa\": {\n    \"esxi\": {\n      \"hostname\": \"__ESXI_IP__\",\n      \"username\": \"root\",\n      \"password\": \"GGu]5Dd,s\u0026\",\n      \"deployment_network\": \"VM Public Net 1\",\n      \"datastore\": \"datastore1\"\n    },\n    \"appliance\": {\n      \"thin_disk_mode\": true,\n      \"deployment_option\": \"small\",\n      \"name\": \"vcva\"\n    },\n    \"network\": {\n      \"ip_family\": \"ipv4\",\n      \"mode\": \"static\",\n      \"ip\": \"__VCENTER_IP__\",\n      \"dns_servers\": [\n        \"__VCENTER_GATEWAY__\"\n      ],\n      \"prefix\": \"__VCENTER_PREFIX_LENGTH__\",\n      \"gateway\": \"__VCENTER_GATEWAY__\",\n      \"system_name\": \"vcva.equinix-metal.local\"\n    },\n    \"os\": {\n      \"password\": \"0UPjq0YB?5g?Jnzz\",\n      \"ntp_servers\": \"132.163.96.6\",\n      \"ssh_enable\": true\n    },\n    \"sso\": {\n      \"password\": \"4!c1Dmu!?GVoZD9a\",\n      \"domain_name\": \"vsphere.local\"\n    }\n  },\n  \"ceip\": {\n    \"description\": {\n      \"__comments\": [\n        \"++++VMware Customer Experience Improvement Program (CEIP)++++\",\n        \"VMware's Customer Experience Improvement Program (CEIP) \",\n        \"provides VMware with information that enables VMware to \",\n        \"improve its products and services, to fix problems, \",\n        \"and to advise you on how best to deploy and use our \",\n        \"products. As part of CEIP, VMware collects technical \",\n        \"information about your organization's use of VMware \",\n        \"products and services on a regular basis in association \",\n        \"with your organization's VMware license key(s). This \",\n        \"information does not personally identify any individual. \",\n        \"\",\n        \"Additional information regarding the data collected \",\n        \"through CEIP and the purposes for which it is used by \",\n        \"VMware is set forth in the Trust \u0026 Assurance Center at \",\n        \"http://www.vmware.com/trustvmware/ceip.html . If you \",\n        \"prefer not to participate in VMware's CEIP for this \",\n        \"product, you should disable CEIP by setting \",\n        \"'ceip_enabled': false. You may join or leave VMware's \",\n        \"CEIP for this product at any time. Please confirm your \",\n        \"acknowledgement by passing in the parameter \",\n        \"--acknowledge-ceip in the command line.\",\n        \"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n      ]\n    },\n    \"settings\": {\n      \"ceip_enabled\": false\n    }\n  }\n}",
            "template": "{\n  \"__version\": \"2.13.0\",\n  \"new_vcsa\": {\n    \"esxi\": {\n      \"hostname\": \"__ESXI_IP__\",\n      \"username\": \"root\",\n      \"password\": \"${first_esx_pass}\",\n      \"deployment_network\": \"${vcenter_network}\",\n      \"datastore\": \"datastore1\"\n    },\n    \"appliance\": {\n      \"thin_disk_mode\": true,\n      \"deployment_option\": \"small\",\n      \"name\": \"vcva\"\n    },\n    \"network\": {\n      \"ip_family\": \"ipv4\",\n      \"mode\": \"static\",\n      \"ip\": \"__VCENTER_IP__\",\n      \"dns_servers\": [\n        \"__VCENTER_GATEWAY__\"\n      ],\n      \"prefix\": \"__VCENTER_PREFIX_LENGTH__\",\n      \"gateway\": \"__VCENTER_GATEWAY__\",\n      \"system_name\": \"vcva.${domain_name}\"\n    },\n    \"os\": {\n      \"password\": \"${vcenter_password}\",\n      \"ntp_servers\": \"132.163.96.6\",\n      \"ssh_enable\": true\n    },\n    \"sso\": {\n      \"password\": \"${sso_password}\",\n      \"domain_name\": \"${vcenter_domain}\"\n    }\n  },\n  \"ceip\": {\n    \"description\": {\n      \"__comments\": [\n        \"++++VMware Customer Experience Improvement Program (CEIP)++++\",\n        \"VMware's Customer Experience Improvement Program (CEIP) \",\n        \"provides VMware with information that enables VMware to \",\n        \"improve its products and services, to fix problems, \",\n        \"and to advise you on how best to deploy and use our \",\n        \"products. As part of CEIP, VMware collects technical \",\n        \"information about your organization's use of VMware \",\n        \"products and services on a regular basis in association \",\n        \"with your organization's VMware license key(s). This \",\n        \"information does not personally identify any individual. \",\n        \"\",\n        \"Additional information regarding the data collected \",\n        \"through CEIP and the purposes for which it is used by \",\n        \"VMware is set forth in the Trust \u0026 Assurance Center at \",\n        \"http://www.vmware.com/trustvmware/ceip.html . If you \",\n        \"prefer not to participate in VMware's CEIP for this \",\n        \"product, you should disable CEIP by setting \",\n        \"'ceip_enabled': false. You may join or leave VMware's \",\n        \"CEIP for this product at any time. Please confirm your \",\n        \"acknowledgement by passing in the parameter \",\n        \"--acknowledge-ceip in the command line.\",\n        \"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n      ]\n    },\n    \"settings\": {\n      \"ceip_enabled\": false\n    }\n  }\n}",
            "vars": {
              "domain_name": "equinix-metal.local",
              "first_esx_pass": "GGu]5Dd,s\u0026",
              "sso_password": "4!c1Dmu!?GVoZD9a",
              "vcenter_domain": "vsphere.local",
              "vcenter_network": "VM Public Net 1",
              "vcenter_password": "0UPjq0YB?5g?Jnzz"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "vpn_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "31a168a677d06e234922fbcb1143b617cf740d26ea242d7d6f43bee7c4b9d409",
            "rendered": "#!/bin/sh\n#\n# Script for automatic setup of an IPsec VPN server on Ubuntu LTS and Debian.\n# Works on any dedicated server or virtual private server (VPS) except OpenVZ.\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2014-2019 Lin Song \u003clinsongui@gmail.com\u003e\n# Based on the work of Thomas Sarlandie (Copyright 2012)\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK='xO5M@NHH2vU$A9Vyfx9y'\nYOUR_USERNAME='vm_admin'\nYOUR_PASSWORD='7QcnDt$FW4pvG$F!'\n\n# Important notes:   https://git.io/vpnnotes\n# Setup VPN clients: https://git.io/vpnclients\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T)\n\nexiterr()  { echo \"Error: $1\" \u003e\u00262; exit 1; }\nexiterr2() { exiterr \"'apt-get install' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2\u003e/dev/null; }\nbigecho() { echo; echo \"## $1\"; echo; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\nvpnsetup() {\n\nos_type=$(lsb_release -si 2\u003e/dev/null)\nif [ -z \"$os_type\" ]; then\n  [ -f /etc/os-release  ] \u0026\u0026 os_type=$(. /etc/os-release  \u0026\u0026 printf '%s' \"$ID\")\n  [ -f /etc/lsb-release ] \u0026\u0026 os_type=$(. /etc/lsb-release \u0026\u0026 printf '%s' \"$DISTRIB_ID\")\nfi\nif ! printf '%s' \"$os_type\" | head -n 1 | grep -qiF -e ubuntu -e debian -e raspbian; then\n  exiterr \"This script only supports Ubuntu and Debian.\"\nfi\n\nif [ \"$(sed 's/\\..*//' /etc/debian_version)\" = \"7\" ]; then\n  exiterr \"Debian 7 is not supported.\"\nfi\n\nif [ -f /proc/user_beancounters ]; then\n  exiterr \"OpenVZ VPS is not supported. Try OpenVPN: github.com/Nyr/openvpn-install\"\nfi\n\nif [ \"$(id -u)\" != 0 ]; then\n  exiterr \"Script must be run as root. Try 'sudo sh $0'\"\nfi\n\ndef_iface=$(route 2\u003e/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n[ -z \"$def_iface\" ] \u0026\u0026 def_iface=$(ip -4 route list 0/0 2\u003e/dev/null | grep -m 1 -Po '(?\u003c=dev )(\\S+)')\ndef_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2\u003e/dev/null)\nif [ -n \"$def_state\" ] \u0026\u0026 [ \"$def_state\" != \"down\" ]; then\n  if ! uname -m | grep -qi '^arm'; then\n    case \"$def_iface\" in\n      wl*)\n        exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n        ;;\n    esac\n  fi\n  NET_IFACE=\"$def_iface\"\nelse\n  eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2\u003e/dev/null)\n  if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n    exiterr \"Could not detect the default network interface.\"\n  fi\n  NET_IFACE=eth0\nfi\n\n[ -n \"$YOUR_IPSEC_PSK\" ] \u0026\u0026 VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n[ -n \"$YOUR_USERNAME\" ] \u0026\u0026 VPN_USER=\"$YOUR_USERNAME\"\n[ -n \"$YOUR_PASSWORD\" ] \u0026\u0026 VPN_PASSWORD=\"$YOUR_PASSWORD\"\n\nif [ -z \"$VPN_IPSEC_PSK\" ] \u0026\u0026 [ -z \"$VPN_USER\" ] \u0026\u0026 [ -z \"$VPN_PASSWORD\" ]; then\n  bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n  VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' \u003c /dev/urandom | head -c 20)\n  VPN_USER=vpnuser\n  VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' \u003c /dev/urandom | head -c 16)\nfi\n\nif [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n  exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\nfi\n\nif printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n  exiterr \"VPN credentials must not contain non-ASCII characters.\"\nfi\n\ncase \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n  *[\\\\\\\"\\']*)\n    exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n    ;;\nesac\n\nbigecho \"VPN setup in progress... Please be patient.\"\n\n# Create and change to working dir\nmkdir -p /opt/src\ncd /opt/src || exit 1\n\ncount=0\nAPT_LK=/var/lib/apt/lists/lock\nPKG_LK=/var/lib/dpkg/lock\nwhile fuser \"$APT_LK\" \"$PKG_LK\" \u003e/dev/null 2\u003e\u00261 \\\n  || lsof \"$APT_LK\" \u003e/dev/null 2\u003e\u00261 || lsof \"$PKG_LK\" \u003e/dev/null 2\u003e\u00261; do\n  [ \"$count\" = \"0\" ] \u0026\u0026 bigecho \"Waiting for apt to be available...\"\n  [ \"$count\" -ge \"60\" ] \u0026\u0026 exiterr \"Could not get apt/dpkg lock.\"\n  count=$((count+1))\n  printf '%s' '.'\n  sleep 3\ndone\n\nbigecho \"Populating apt-get cache...\"\n\nexport DEBIAN_FRONTEND=noninteractive\napt-get -yq update || exiterr \"'apt-get update' failed.\"\n\nbigecho \"Installing packages required for setup...\"\n\napt-get -yq install wget dnsutils openssl \\\n  iptables iproute2 gawk grep sed net-tools || exiterr2\n\nbigecho \"Trying to auto discover IP of this server...\"\n\ncat \u003c\u003c'EOF'\nIn case the script hangs here for more than a few minutes,\npress Ctrl-C to abort. Then edit it and manually enter IP.\nEOF\n\n[ -z \"$PUBLIC_IP\" ] \u0026\u0026 PUBLIC_IP=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n\ncheck_ip \"$PUBLIC_IP\" || PUBLIC_IP=$(wget -t 3 -T 15 -qO- http://ipv4.icanhazip.com)\ncheck_ip \"$PUBLIC_IP\" || exiterr \"Cannot detect this server's public IP. Edit the script and manually enter it.\"\n\nbigecho \"Installing packages required for the VPN...\"\n\napt-get -yq install libnss3-dev libnspr4-dev pkg-config \\\n  libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev \\\n  libcurl4-nss-dev flex bison gcc make libnss3-tools \\\n  libevent-dev ppp xl2tpd || exiterr2\n\nbigecho \"Installing Fail2Ban to protect SSH...\"\n\napt-get -yq install fail2ban || exiterr2\n\nbigecho \"Compiling and installing Libreswan...\"\n\nSWAN_VER=3.29\nswan_file=\"libreswan-$SWAN_VER.tar.gz\"\nswan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\nswan_url2=\"https://download.libreswan.org/$swan_file\"\nif ! { wget -t 3 -T 30 -nv -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -nv -O \"$swan_file\" \"$swan_url2\"; }; then\n  exit 1\nfi\n/bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\ntar xzf \"$swan_file\" \u0026\u0026 /bin/rm -f \"$swan_file\"\ncd \"libreswan-$SWAN_VER\" || exit 1\ncat \u003e Makefile.inc.local \u003c\u003c'EOF'\nWERROR_CFLAGS =\nUSE_DNSSEC = false\nUSE_DH31 = false\nUSE_NSS_AVA_COPY = true\nUSE_NSS_IPSEC_PROFILE = false\nUSE_GLIBC_KERN_FLIP_HEADERS = true\nEOF\nif [ \"$(packaging/utils/lswan_detect.sh init)\" = \"systemd\" ]; then\n  apt-get -yq install libsystemd-dev || exiterr2\nfi\nNPROCS=$(grep -c ^processor /proc/cpuinfo)\n[ -z \"$NPROCS\" ] \u0026\u0026 NPROCS=1\nmake \"-j$((NPROCS+1))\" -s base \u0026\u0026 make -s install-base\n\ncd /opt/src || exit 1\n/bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\nif ! /usr/local/sbin/ipsec --version 2\u003e/dev/null | grep -qF \"$SWAN_VER\"; then\n  exiterr \"Libreswan $SWAN_VER failed to build.\"\nfi\n\nbigecho \"Creating VPN configuration...\"\n\nL2TP_NET='192.168.42.0/24'\nL2TP_LOCAL='192.168.42.1'\nL2TP_POOL='192.168.42.10-192.168.42.250'\nXAUTH_NET='192.168.43.0/24'\nXAUTH_POOL='192.168.43.10-192.168.43.250'\nDNS_SRV1=$L2TP_LOCAL\nDNS_SRV2='8.8.4.4'\nDNS_SRVS=\"\\\"$DNS_SRV1\\\"\"\n[ -n \"$VPN_DNS_SRV1\" ] \u0026\u0026 [ -z \"$VPN_DNS_SRV2\" ] \u0026\u0026 DNS_SRVS=\"$DNS_SRV1\"\n\n# Create IPsec config\nconf_bk \"/etc/ipsec.conf\"\ncat \u003e /etc/ipsec.conf \u003c\u003cEOF\nversion 2.0\n\nconfig setup\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  protostack=netkey\n  interfaces=%defaultroute\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$PUBLIC_IP\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=120\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2,aes128-sha2,aes256-sha1,aes128-sha1,aes256-sha2;modp1024,aes128-sha1;modp1024\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  phase2=esp\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  xauthby=file\n  ike-frag=yes\n  cisco-unity=yes\n  also=shared\nEOF\n\nif uname -m | grep -qi '^arm'; then\n  sed -i '/phase2alg/s/,aes256-sha2_512//' /etc/ipsec.conf\nfi\n\n# Specify IPsec PSK\nconf_bk \"/etc/ipsec.secrets\"\ncat \u003e /etc/ipsec.secrets \u003c\u003cEOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n\n# Create xl2tpd config\nconf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat \u003e /etc/xl2tpd/xl2tpd.conf \u003c\u003cEOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n\n# Set xl2tpd options\nconf_bk \"/etc/ppp/options.xl2tpd\"\ncat \u003e /etc/ppp/options.xl2tpd \u003c\u003cEOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n\n#if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV3\" ]; then\n#cat \u003e\u003e /etc/ppp/options.xl2tpd \u003c\u003cEOF\n#ms-dns $DNS_SRV2\n#EOF\n#fi\n\n# Create VPN credentials\nconf_bk \"/etc/ppp/chap-secrets\"\ncat \u003e /etc/ppp/chap-secrets \u003c\u003cEOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n\nconf_bk \"/etc/ipsec.d/passwd\"\nVPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat \u003e /etc/ipsec.d/passwd \u003c\u003cEOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n\nbigecho \"Updating sysctl settings...\"\n\nif ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n  conf_bk \"/etc/sysctl.conf\"\n  if [ \"$(getconf LONG_BIT)\" = \"64\" ]; then\n    SHM_MAX=68719476736\n    SHM_ALL=4294967296\n  else\n    SHM_MAX=4294967295\n    SHM_ALL=268435456\n  fi\ncat \u003e\u003e /etc/sysctl.conf \u003c\u003cEOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\nkernel.shmmax = $SHM_MAX\nkernel.shmall = $SHM_ALL\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_source_route = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 12582912\nnet.core.rmem_max = 12582912\nnet.ipv4.tcp_rmem = 10240 87380 12582912\nnet.ipv4.tcp_wmem = 10240 87380 12582912\nEOF\nfi\n\nbigecho \"Updating IPTables rules...\"\n\n# Check if rules need updating\nipt_flag=0\nIPT_FILE=\"/etc/iptables.rules\"\nIPT_FILE2=\"/etc/iptables/rules.v4\"\nif ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\" \\\n   || ! iptables -t nat -C POSTROUTING -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE 2\u003e/dev/null \\\n   || ! iptables -t nat -C POSTROUTING -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE 2\u003e/dev/null; then\n  ipt_flag=1\nfi\n\n# Add IPTables rules for VPN\nif [ \"$ipt_flag\" = \"1\" ]; then\n  service fail2ban stop \u003e/dev/null 2\u003e\u00261\n  iptables-save \u003e \"$IPT_FILE.old-$SYS_DT\"\n  iptables -I INPUT 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n  iptables -I INPUT 2 -m conntrack --ctstate INVALID -j DROP\n  iptables -I INPUT 3 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I INPUT 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n  iptables -I INPUT 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n  iptables -I INPUT 6 -p udp --dport 1701 -j DROP\n  iptables -I FORWARD 1 -m conntrack --ctstate INVALID -j DROP\n  iptables -I FORWARD 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n  iptables -I FORWARD 4 -i ppp+ -o ppp+ -s \"$L2TP_NET\" -d \"$L2TP_NET\" -j ACCEPT\n  iptables -I FORWARD 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n  # Uncomment if you wish to disallow traffic between VPN clients themselves\n  # iptables -I FORWARD 2 -i ppp+ -o ppp+ -s \"$L2TP_NET\" -d \"$L2TP_NET\" -j DROP\n  # iptables -I FORWARD 3 -s \"$XAUTH_NET\" -d \"$XAUTH_NET\" -j DROP\n  #iptables -A FORWARD -j DROP\n  iptables -t nat -I POSTROUTING -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n  iptables -t nat -I POSTROUTING -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n  echo \"# Modified by hwdsl2 VPN script\" \u003e \"$IPT_FILE\"\n  iptables-save \u003e\u003e \"$IPT_FILE\"\n\n  if [ -f \"$IPT_FILE2\" ]; then\n    conf_bk \"$IPT_FILE2\"\n    /bin/cp -f \"$IPT_FILE\" \"$IPT_FILE2\"\n  fi\nfi\n\nbigecho \"Enabling services on boot...\"\n\n# Check for iptables-persistent\nIPT_PST=\"/etc/init.d/iptables-persistent\"\nIPT_PST2=\"/usr/share/netfilter-persistent/plugins.d/15-ip4tables\"\nipt_load=1\nif [ -f \"$IPT_FILE2\" ] \u0026\u0026 { [ -f \"$IPT_PST\" ] || [ -f \"$IPT_PST2\" ]; }; then\n  ipt_load=0\nfi\n\nif [ \"$ipt_load\" = \"1\" ]; then\n  mkdir -p /etc/network/if-pre-up.d\ncat \u003e /etc/network/if-pre-up.d/iptablesload \u003c\u003c'EOF'\n#!/bin/sh\niptables-restore \u003c /etc/iptables.rules\nexit 0\nEOF\n  chmod +x /etc/network/if-pre-up.d/iptablesload\n\n  if [ -f /usr/sbin/netplan ]; then\n    mkdir -p /etc/systemd/system\ncat \u003e /etc/systemd/system/load-iptables-rules.service \u003c\u003c'EOF'\n[Unit]\nDescription = Load /etc/iptables.rules\nDefaultDependencies=no\n\nBefore=network-pre.target\nWants=network-pre.target\n\nWants=systemd-modules-load.service local-fs.target\nAfter=systemd-modules-load.service local-fs.target\n\n[Service]\nType=oneshot\nExecStart=/etc/network/if-pre-up.d/iptablesload\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    systemctl enable load-iptables-rules 2\u003e/dev/null\n  fi\nfi\n\nfor svc in fail2ban ipsec xl2tpd; do\n  update-rc.d \"$svc\" enable \u003e/dev/null 2\u003e\u00261\n  systemctl enable \"$svc\" 2\u003e/dev/null\ndone\n\nif ! grep -qs \"hwdsl2 VPN script\" /etc/rc.local; then\n  if [ -f /etc/rc.local ]; then\n    conf_bk \"/etc/rc.local\"\n    sed --follow-symlinks -i '/^exit 0/d' /etc/rc.local\n  else\n    echo '#!/bin/sh' \u003e /etc/rc.local\n  fi\ncat \u003e\u003e /etc/rc.local \u003c\u003c'EOF'\n\n# Added by hwdsl2 VPN script\n(sleep 15\nservice ipsec restart\nservice xl2tpd restart\necho 1 \u003e /proc/sys/net/ipv4/ip_forward)\u0026\nexit 0\nEOF\nfi\n\nbigecho \"Starting services...\"\n\n# Reload sysctl.conf\nsysctl -e -q -p\n\n# Update file attributes\nchmod +x /etc/rc.local\nchmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n\n# Apply new IPTables rules\niptables-restore \u003c \"$IPT_FILE\"\n\n# Restart services\nmkdir -p /run/pluto\nservice fail2ban restart 2\u003e/dev/null\nservice ipsec restart 2\u003e/dev/null\nservice xl2tpd restart 2\u003e/dev/null\n\ncat \u003c\u003cEOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $PUBLIC_IP\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nImportant notes:   https://git.io/vpnnotes\nSetup VPN clients: https://git.io/vpnclients\n\n================================================\n\nEOF\n\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit 0\n",
            "template": "#!/bin/sh\n#\n# Script for automatic setup of an IPsec VPN server on Ubuntu LTS and Debian.\n# Works on any dedicated server or virtual private server (VPS) except OpenVZ.\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2014-2019 Lin Song \u003clinsongui@gmail.com\u003e\n# Based on the work of Thomas Sarlandie (Copyright 2012)\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK='${ipsec_psk}'\nYOUR_USERNAME='${vpn_user}'\nYOUR_PASSWORD='${vpn_pass}'\n\n# Important notes:   https://git.io/vpnnotes\n# Setup VPN clients: https://git.io/vpnclients\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T)\n\nexiterr()  { echo \"Error: $1\" \u003e\u00262; exit 1; }\nexiterr2() { exiterr \"'apt-get install' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2\u003e/dev/null; }\nbigecho() { echo; echo \"## $1\"; echo; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\nvpnsetup() {\n\nos_type=$(lsb_release -si 2\u003e/dev/null)\nif [ -z \"$os_type\" ]; then\n  [ -f /etc/os-release  ] \u0026\u0026 os_type=$(. /etc/os-release  \u0026\u0026 printf '%s' \"$ID\")\n  [ -f /etc/lsb-release ] \u0026\u0026 os_type=$(. /etc/lsb-release \u0026\u0026 printf '%s' \"$DISTRIB_ID\")\nfi\nif ! printf '%s' \"$os_type\" | head -n 1 | grep -qiF -e ubuntu -e debian -e raspbian; then\n  exiterr \"This script only supports Ubuntu and Debian.\"\nfi\n\nif [ \"$(sed 's/\\..*//' /etc/debian_version)\" = \"7\" ]; then\n  exiterr \"Debian 7 is not supported.\"\nfi\n\nif [ -f /proc/user_beancounters ]; then\n  exiterr \"OpenVZ VPS is not supported. Try OpenVPN: github.com/Nyr/openvpn-install\"\nfi\n\nif [ \"$(id -u)\" != 0 ]; then\n  exiterr \"Script must be run as root. Try 'sudo sh $0'\"\nfi\n\ndef_iface=$(route 2\u003e/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n[ -z \"$def_iface\" ] \u0026\u0026 def_iface=$(ip -4 route list 0/0 2\u003e/dev/null | grep -m 1 -Po '(?\u003c=dev )(\\S+)')\ndef_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2\u003e/dev/null)\nif [ -n \"$def_state\" ] \u0026\u0026 [ \"$def_state\" != \"down\" ]; then\n  if ! uname -m | grep -qi '^arm'; then\n    case \"$def_iface\" in\n      wl*)\n        exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n        ;;\n    esac\n  fi\n  NET_IFACE=\"$def_iface\"\nelse\n  eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2\u003e/dev/null)\n  if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n    exiterr \"Could not detect the default network interface.\"\n  fi\n  NET_IFACE=eth0\nfi\n\n[ -n \"$YOUR_IPSEC_PSK\" ] \u0026\u0026 VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n[ -n \"$YOUR_USERNAME\" ] \u0026\u0026 VPN_USER=\"$YOUR_USERNAME\"\n[ -n \"$YOUR_PASSWORD\" ] \u0026\u0026 VPN_PASSWORD=\"$YOUR_PASSWORD\"\n\nif [ -z \"$VPN_IPSEC_PSK\" ] \u0026\u0026 [ -z \"$VPN_USER\" ] \u0026\u0026 [ -z \"$VPN_PASSWORD\" ]; then\n  bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n  VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' \u003c /dev/urandom | head -c 20)\n  VPN_USER=vpnuser\n  VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' \u003c /dev/urandom | head -c 16)\nfi\n\nif [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n  exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\nfi\n\nif printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n  exiterr \"VPN credentials must not contain non-ASCII characters.\"\nfi\n\ncase \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n  *[\\\\\\\"\\']*)\n    exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n    ;;\nesac\n\nbigecho \"VPN setup in progress... Please be patient.\"\n\n# Create and change to working dir\nmkdir -p /opt/src\ncd /opt/src || exit 1\n\ncount=0\nAPT_LK=/var/lib/apt/lists/lock\nPKG_LK=/var/lib/dpkg/lock\nwhile fuser \"$APT_LK\" \"$PKG_LK\" \u003e/dev/null 2\u003e\u00261 \\\n  || lsof \"$APT_LK\" \u003e/dev/null 2\u003e\u00261 || lsof \"$PKG_LK\" \u003e/dev/null 2\u003e\u00261; do\n  [ \"$count\" = \"0\" ] \u0026\u0026 bigecho \"Waiting for apt to be available...\"\n  [ \"$count\" -ge \"60\" ] \u0026\u0026 exiterr \"Could not get apt/dpkg lock.\"\n  count=$((count+1))\n  printf '%s' '.'\n  sleep 3\ndone\n\nbigecho \"Populating apt-get cache...\"\n\nexport DEBIAN_FRONTEND=noninteractive\napt-get -yq update || exiterr \"'apt-get update' failed.\"\n\nbigecho \"Installing packages required for setup...\"\n\napt-get -yq install wget dnsutils openssl \\\n  iptables iproute2 gawk grep sed net-tools || exiterr2\n\nbigecho \"Trying to auto discover IP of this server...\"\n\ncat \u003c\u003c'EOF'\nIn case the script hangs here for more than a few minutes,\npress Ctrl-C to abort. Then edit it and manually enter IP.\nEOF\n\n[ -z \"$PUBLIC_IP\" ] \u0026\u0026 PUBLIC_IP=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n\ncheck_ip \"$PUBLIC_IP\" || PUBLIC_IP=$(wget -t 3 -T 15 -qO- http://ipv4.icanhazip.com)\ncheck_ip \"$PUBLIC_IP\" || exiterr \"Cannot detect this server's public IP. Edit the script and manually enter it.\"\n\nbigecho \"Installing packages required for the VPN...\"\n\napt-get -yq install libnss3-dev libnspr4-dev pkg-config \\\n  libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev \\\n  libcurl4-nss-dev flex bison gcc make libnss3-tools \\\n  libevent-dev ppp xl2tpd || exiterr2\n\nbigecho \"Installing Fail2Ban to protect SSH...\"\n\napt-get -yq install fail2ban || exiterr2\n\nbigecho \"Compiling and installing Libreswan...\"\n\nSWAN_VER=3.29\nswan_file=\"libreswan-$SWAN_VER.tar.gz\"\nswan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\nswan_url2=\"https://download.libreswan.org/$swan_file\"\nif ! { wget -t 3 -T 30 -nv -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -nv -O \"$swan_file\" \"$swan_url2\"; }; then\n  exit 1\nfi\n/bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\ntar xzf \"$swan_file\" \u0026\u0026 /bin/rm -f \"$swan_file\"\ncd \"libreswan-$SWAN_VER\" || exit 1\ncat \u003e Makefile.inc.local \u003c\u003c'EOF'\nWERROR_CFLAGS =\nUSE_DNSSEC = false\nUSE_DH31 = false\nUSE_NSS_AVA_COPY = true\nUSE_NSS_IPSEC_PROFILE = false\nUSE_GLIBC_KERN_FLIP_HEADERS = true\nEOF\nif [ \"$(packaging/utils/lswan_detect.sh init)\" = \"systemd\" ]; then\n  apt-get -yq install libsystemd-dev || exiterr2\nfi\nNPROCS=$(grep -c ^processor /proc/cpuinfo)\n[ -z \"$NPROCS\" ] \u0026\u0026 NPROCS=1\nmake \"-j$((NPROCS+1))\" -s base \u0026\u0026 make -s install-base\n\ncd /opt/src || exit 1\n/bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\nif ! /usr/local/sbin/ipsec --version 2\u003e/dev/null | grep -qF \"$SWAN_VER\"; then\n  exiterr \"Libreswan $SWAN_VER failed to build.\"\nfi\n\nbigecho \"Creating VPN configuration...\"\n\nL2TP_NET='192.168.42.0/24'\nL2TP_LOCAL='192.168.42.1'\nL2TP_POOL='192.168.42.10-192.168.42.250'\nXAUTH_NET='192.168.43.0/24'\nXAUTH_POOL='192.168.43.10-192.168.43.250'\nDNS_SRV1=$L2TP_LOCAL\nDNS_SRV2='8.8.4.4'\nDNS_SRVS=\"\\\"$DNS_SRV1\\\"\"\n[ -n \"$VPN_DNS_SRV1\" ] \u0026\u0026 [ -z \"$VPN_DNS_SRV2\" ] \u0026\u0026 DNS_SRVS=\"$DNS_SRV1\"\n\n# Create IPsec config\nconf_bk \"/etc/ipsec.conf\"\ncat \u003e /etc/ipsec.conf \u003c\u003cEOF\nversion 2.0\n\nconfig setup\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  protostack=netkey\n  interfaces=%defaultroute\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$PUBLIC_IP\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=120\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2,aes128-sha2,aes256-sha1,aes128-sha1,aes256-sha2;modp1024,aes128-sha1;modp1024\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  phase2=esp\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  xauthby=file\n  ike-frag=yes\n  cisco-unity=yes\n  also=shared\nEOF\n\nif uname -m | grep -qi '^arm'; then\n  sed -i '/phase2alg/s/,aes256-sha2_512//' /etc/ipsec.conf\nfi\n\n# Specify IPsec PSK\nconf_bk \"/etc/ipsec.secrets\"\ncat \u003e /etc/ipsec.secrets \u003c\u003cEOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n\n# Create xl2tpd config\nconf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat \u003e /etc/xl2tpd/xl2tpd.conf \u003c\u003cEOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n\n# Set xl2tpd options\nconf_bk \"/etc/ppp/options.xl2tpd\"\ncat \u003e /etc/ppp/options.xl2tpd \u003c\u003cEOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n\n#if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV3\" ]; then\n#cat \u003e\u003e /etc/ppp/options.xl2tpd \u003c\u003cEOF\n#ms-dns $DNS_SRV2\n#EOF\n#fi\n\n# Create VPN credentials\nconf_bk \"/etc/ppp/chap-secrets\"\ncat \u003e /etc/ppp/chap-secrets \u003c\u003cEOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n\nconf_bk \"/etc/ipsec.d/passwd\"\nVPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat \u003e /etc/ipsec.d/passwd \u003c\u003cEOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n\nbigecho \"Updating sysctl settings...\"\n\nif ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n  conf_bk \"/etc/sysctl.conf\"\n  if [ \"$(getconf LONG_BIT)\" = \"64\" ]; then\n    SHM_MAX=68719476736\n    SHM_ALL=4294967296\n  else\n    SHM_MAX=4294967295\n    SHM_ALL=268435456\n  fi\ncat \u003e\u003e /etc/sysctl.conf \u003c\u003cEOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\nkernel.shmmax = $SHM_MAX\nkernel.shmall = $SHM_ALL\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_source_route = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 12582912\nnet.core.rmem_max = 12582912\nnet.ipv4.tcp_rmem = 10240 87380 12582912\nnet.ipv4.tcp_wmem = 10240 87380 12582912\nEOF\nfi\n\nbigecho \"Updating IPTables rules...\"\n\n# Check if rules need updating\nipt_flag=0\nIPT_FILE=\"/etc/iptables.rules\"\nIPT_FILE2=\"/etc/iptables/rules.v4\"\nif ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\" \\\n   || ! iptables -t nat -C POSTROUTING -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE 2\u003e/dev/null \\\n   || ! iptables -t nat -C POSTROUTING -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE 2\u003e/dev/null; then\n  ipt_flag=1\nfi\n\n# Add IPTables rules for VPN\nif [ \"$ipt_flag\" = \"1\" ]; then\n  service fail2ban stop \u003e/dev/null 2\u003e\u00261\n  iptables-save \u003e \"$IPT_FILE.old-$SYS_DT\"\n  iptables -I INPUT 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n  iptables -I INPUT 2 -m conntrack --ctstate INVALID -j DROP\n  iptables -I INPUT 3 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I INPUT 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n  iptables -I INPUT 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n  iptables -I INPUT 6 -p udp --dport 1701 -j DROP\n  iptables -I FORWARD 1 -m conntrack --ctstate INVALID -j DROP\n  iptables -I FORWARD 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n  iptables -I FORWARD 4 -i ppp+ -o ppp+ -s \"$L2TP_NET\" -d \"$L2TP_NET\" -j ACCEPT\n  iptables -I FORWARD 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n  # Uncomment if you wish to disallow traffic between VPN clients themselves\n  # iptables -I FORWARD 2 -i ppp+ -o ppp+ -s \"$L2TP_NET\" -d \"$L2TP_NET\" -j DROP\n  # iptables -I FORWARD 3 -s \"$XAUTH_NET\" -d \"$XAUTH_NET\" -j DROP\n  #iptables -A FORWARD -j DROP\n  iptables -t nat -I POSTROUTING -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n  iptables -t nat -I POSTROUTING -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n  echo \"# Modified by hwdsl2 VPN script\" \u003e \"$IPT_FILE\"\n  iptables-save \u003e\u003e \"$IPT_FILE\"\n\n  if [ -f \"$IPT_FILE2\" ]; then\n    conf_bk \"$IPT_FILE2\"\n    /bin/cp -f \"$IPT_FILE\" \"$IPT_FILE2\"\n  fi\nfi\n\nbigecho \"Enabling services on boot...\"\n\n# Check for iptables-persistent\nIPT_PST=\"/etc/init.d/iptables-persistent\"\nIPT_PST2=\"/usr/share/netfilter-persistent/plugins.d/15-ip4tables\"\nipt_load=1\nif [ -f \"$IPT_FILE2\" ] \u0026\u0026 { [ -f \"$IPT_PST\" ] || [ -f \"$IPT_PST2\" ]; }; then\n  ipt_load=0\nfi\n\nif [ \"$ipt_load\" = \"1\" ]; then\n  mkdir -p /etc/network/if-pre-up.d\ncat \u003e /etc/network/if-pre-up.d/iptablesload \u003c\u003c'EOF'\n#!/bin/sh\niptables-restore \u003c /etc/iptables.rules\nexit 0\nEOF\n  chmod +x /etc/network/if-pre-up.d/iptablesload\n\n  if [ -f /usr/sbin/netplan ]; then\n    mkdir -p /etc/systemd/system\ncat \u003e /etc/systemd/system/load-iptables-rules.service \u003c\u003c'EOF'\n[Unit]\nDescription = Load /etc/iptables.rules\nDefaultDependencies=no\n\nBefore=network-pre.target\nWants=network-pre.target\n\nWants=systemd-modules-load.service local-fs.target\nAfter=systemd-modules-load.service local-fs.target\n\n[Service]\nType=oneshot\nExecStart=/etc/network/if-pre-up.d/iptablesload\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    systemctl enable load-iptables-rules 2\u003e/dev/null\n  fi\nfi\n\nfor svc in fail2ban ipsec xl2tpd; do\n  update-rc.d \"$svc\" enable \u003e/dev/null 2\u003e\u00261\n  systemctl enable \"$svc\" 2\u003e/dev/null\ndone\n\nif ! grep -qs \"hwdsl2 VPN script\" /etc/rc.local; then\n  if [ -f /etc/rc.local ]; then\n    conf_bk \"/etc/rc.local\"\n    sed --follow-symlinks -i '/^exit 0/d' /etc/rc.local\n  else\n    echo '#!/bin/sh' \u003e /etc/rc.local\n  fi\ncat \u003e\u003e /etc/rc.local \u003c\u003c'EOF'\n\n# Added by hwdsl2 VPN script\n(sleep 15\nservice ipsec restart\nservice xl2tpd restart\necho 1 \u003e /proc/sys/net/ipv4/ip_forward)\u0026\nexit 0\nEOF\nfi\n\nbigecho \"Starting services...\"\n\n# Reload sysctl.conf\nsysctl -e -q -p\n\n# Update file attributes\nchmod +x /etc/rc.local\nchmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n\n# Apply new IPTables rules\niptables-restore \u003c \"$IPT_FILE\"\n\n# Restart services\nmkdir -p /run/pluto\nservice fail2ban restart 2\u003e/dev/null\nservice ipsec restart 2\u003e/dev/null\nservice xl2tpd restart 2\u003e/dev/null\n\ncat \u003c\u003cEOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $PUBLIC_IP\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nImportant notes:   https://git.io/vpnnotes\nSetup VPN clients: https://git.io/vpnclients\n\n================================================\n\nEOF\n\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit 0\n",
            "vars": {
              "ipsec_psk": "xO5M@NHH2vU$A9Vyfx9y",
              "vpn_pass": "7QcnDt$FW4pvG$F!",
              "vpn_user": "vm_admin"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "apply_esx_network_config",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "803381157006627463",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.esx_host_networking",
            "data.template_file.user_data",
            "null_resource.copy_update_uplinks",
            "null_resource.esx_network_prereqs",
            "packet_device.esxi_hosts",
            "packet_device.router",
            "packet_device_network_type.esxi_hosts",
            "packet_port_vlan_attachment.esxi_priv_vlan_attach",
            "packet_port_vlan_attachment.esxi_pub_vlan_attach",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "4087128577885690125",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.esx_host_networking",
            "data.template_file.user_data",
            "null_resource.copy_update_uplinks",
            "null_resource.esx_network_prereqs",
            "packet_device.esxi_hosts",
            "packet_device.router",
            "packet_device_network_type.esxi_hosts",
            "packet_port_vlan_attachment.esxi_priv_vlan_attach",
            "packet_port_vlan_attachment.esxi_pub_vlan_attach",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "4116254021204587762",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.esx_host_networking",
            "data.template_file.user_data",
            "null_resource.copy_update_uplinks",
            "null_resource.esx_network_prereqs",
            "packet_device.esxi_hosts",
            "packet_device.router",
            "packet_device_network_type.esxi_hosts",
            "packet_port_vlan_attachment.esxi_priv_vlan_attach",
            "packet_port_vlan_attachment.esxi_pub_vlan_attach",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "copy_update_uplinks",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3902012343923623305",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "copy_vcva_template",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2632077200343537272",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "data.template_file.vcva_template",
            "packet_device.esxi_hosts",
            "packet_device.router",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans",
            "random_string.sso_password",
            "random_string.vcenter_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "deploy_vcva",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "619450723770237841",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.claim_vsan_disks",
            "data.template_file.deploy_vcva_script",
            "data.template_file.esx_host_networking",
            "data.template_file.user_data",
            "null_resource.apply_esx_network_config",
            "null_resource.copy_update_uplinks",
            "null_resource.esx_network_prereqs",
            "packet_device.esxi_hosts",
            "packet_device.router",
            "packet_device_network_type.esxi_hosts",
            "packet_port_vlan_attachment.esxi_priv_vlan_attach",
            "packet_port_vlan_attachment.esxi_pub_vlan_attach",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans",
            "random_string.sso_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "download_vcenter_iso",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "8431724332861742546",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.download_vcenter",
            "data.template_file.user_data",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "esx_network_prereqs",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2349941474338948058",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.esx_host_networking",
            "data.template_file.user_data",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "install_vpn_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "8883772884014618656",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.download_vcenter",
            "data.template_file.user_data",
            "data.template_file.vpn_installer",
            "null_resource.download_vcenter_iso",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans",
            "random_string.ipsec_psk",
            "random_string.vpn_pass"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_device",
      "name": "esxi_hosts",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "access_private_ipv4": "10.68.34.154",
            "access_public_ipv4": "86.109.7.202",
            "access_public_ipv6": "2604:1380:45f1:4600::7",
            "always_pxe": false,
            "billing_cycle": "hourly",
            "created": "2020-11-24T03:16:44Z",
            "deployed_facility": "dc13",
            "description": null,
            "facilities": [
              "dc13"
            ],
            "force_detach_volumes": false,
            "hardware_reservation_id": null,
            "hostname": "esx01",
            "id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "ip_address": [
              {
                "cidr": 29,
                "reservation_ids": [
                  "1f8308b3-31ef-4c09-8304-7246ebbb01dd"
                ],
                "type": "public_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "private_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "public_ipv6"
              }
            ],
            "ipxe_script_url": "",
            "locked": false,
            "network": [
              {
                "address": "86.109.7.202",
                "cidr": 29,
                "family": 4,
                "gateway": "86.109.7.201",
                "public": true
              },
              {
                "address": "2604:1380:45f1:4600::7",
                "cidr": 127,
                "family": 6,
                "gateway": "2604:1380:45f1:4600::6",
                "public": true
              },
              {
                "address": "10.68.34.154",
                "cidr": 29,
                "family": 4,
                "gateway": "10.68.34.153",
                "public": false
              }
            ],
            "network_type": "layer3",
            "operating_system": "vmware_esxi_7_0",
            "plan": "m3.large.x86",
            "ports": [
              {
                "bonded": true,
                "id": "f0d9f8ef-8c01-4172-9c57-e57e893ca2a3",
                "mac": "",
                "name": "bond0",
                "type": "NetworkBondPort"
              },
              {
                "bonded": true,
                "id": "9a80909f-4b4a-4ea5-966f-d50d830bb9e7",
                "mac": "40:a6:b7:20:34:d0",
                "name": "eth0",
                "type": "NetworkPort"
              },
              {
                "bonded": true,
                "id": "dc86673c-64b8-4282-b7c9-bef24c050cf6",
                "mac": "40:a6:b7:20:34:d1",
                "name": "eth1",
                "type": "NetworkPort"
              }
            ],
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "project_ssh_key_ids": null,
            "root_password": "GGu]5Dd,s\u0026",
            "ssh_key_ids": [
              "c34821e8-8044-4bef-badc-12689724b38c",
              "0c76a188-4580-4c63-9cef-6d7a086199a1",
              "9934e1a1-71b8-4efe-b2be-0fe2faa0062b",
              "341b4052-e0c2-46d9-97e5-1dcea26e1495",
              "016a76e5-fac3-4f1f-a837-bfea5a14b4f8",
              "68ee8e81-23c9-4942-b445-ee6fcbe54ebe",
              "aaaee5c4-c78d-42fc-a33f-3c55e5843290",
              "76ad052c-e178-4105-9725-6a463dfc2f9e",
              "22145495-82de-4616-96c4-99e5ed775296",
              "0207b96f-0340-4b84-b6d9-dd06e9dea07d",
              "62162bea-3fe2-471d-9438-9ad4c334e418",
              "35760350-cc47-4e4c-8e80-e6b0de24f50f",
              "b0e81c70-1d89-4a4e-9d7f-a35994f17e48",
              "0e66c4c5-ed7d-4dc0-a82d-5ccd9d1f4512",
              "6aa6f547-5698-41e4-8dd1-984fbf0d8623",
              "bea2a7b2-a53b-4088-b24d-b3a42ce74bfa",
              "843c6ee7-2c16-42e7-9ced-f5e0cbb3dc59",
              "d208036c-6283-4109-8a83-2188956de0a4",
              "21c3b8a3-9a45-4a4c-8d4b-1bcea7e6d884",
              "3625a6e0-6568-4117-a1c9-44ebaec72cc3",
              "d29ae957-8382-48ab-a004-aa8c84b3a259",
              "352a121d-a733-4d10-94af-1ff7b1316dee",
              "89be62ef-6f00-42e6-91f2-f1aa8d9fe68f",
              "75e60684-85be-4b69-84fd-3871c9bdc9ce",
              "6f2b2e5d-fbae-4fb5-816c-3bf5db4d8192",
              "c18ac8c1-c445-4229-860b-d541cbcd3f04",
              "44c29f99-7ace-4758-8285-4cae69f49e6d",
              "20d14353-a5e6-42db-b0b7-8d9e2cb50a66",
              "705f1be9-eef6-4944-a3cb-93079dee5f90",
              "fe8d89c8-4f71-46c9-81ed-a9d891d2d0fc",
              "d3b2cf65-a5ef-46f1-8dd8-fa1daab6ccc0",
              "dbba8bba-edaa-4538-bf03-2e52f71130bf",
              "62c90ddc-664e-481c-a6a1-d2f0e874a1cf",
              "ae413fb2-eb14-4581-ab29-3a87a4060abf",
              "65834692-b8e6-484d-81a6-11205d119147",
              "1dee6d51-4147-4de3-a270-7d537a4c36b3",
              "db88edde-1315-47b6-9025-f98ff287b9eb",
              "2381d0f5-c7ba-4d24-afc3-059916291e1b",
              "f6f66a73-00a6-4e45-98e5-fbd2a9e1fc39",
              "35804b20-4c23-4a3e-9e96-6bbe3257d6a7",
              "1b30d6d4-652c-4a0e-8e91-c97bce205705",
              "96f012c7-819e-4a56-8f04-1857ff73d856",
              "89ccbccd-eb91-4797-b90f-cd8457a87f0b",
              "b2383f36-3673-4605-99c6-5743d20e5644",
              "780e7d3c-d468-4830-bd9f-07f19ea8773c",
              "048f58d9-b0b5-426b-9651-7b988bfad853",
              "9f673177-498d-4a1e-aa60-e7d80afe9062",
              "5aaf13c1-3f1d-4e54-9b84-83d40008cfdf",
              "91b82616-e05e-44d6-8045-0660a17d4a1d",
              "d5b8dc6b-842a-4e47-b390-bb390d1cdeb8",
              "6ada7c67-0ee5-49e7-b78c-8163a3d30319",
              "f085ad84-b0a3-47ce-a0eb-30f441ba7ab1",
              "8b560e72-5741-40a4-932c-b1aa09f2a3e8",
              "ad7264eb-8f60-4223-b03b-c25577691434",
              "cff2c7bf-c376-4a42-a12a-8326cd71b149",
              "f098624f-227f-4ca0-b632-ba313128f3af",
              "b611a038-d44b-4f33-af92-085896b79b3b",
              "d9762eb5-f233-45de-9f8e-5cbcc58354b1",
              "3eb37b51-392f-4985-aabe-960042360ae0",
              "3425144d-6868-4032-927f-f5486085ebc2",
              "61c7f4de-0046-4ff1-ba79-35aba1550c79",
              "65ed8cfb-2a46-4c48-85b8-980eedb89add",
              "e2ebeed1-da44-4a4e-aca4-30a1cd36b303",
              "dcb2af48-0326-4f25-a468-fb4a857a0b76",
              "e002537d-b0ac-47fb-a225-96b15c8cd348",
              "427651d6-ecf6-4541-b6f5-f7a469590440",
              "b1188ec9-8aa1-4f44-be04-a164bde80e6e",
              "b99ac23a-5a84-4cdb-8073-6f9e14c7be0f",
              "f7fbcbe5-8875-43b4-8cfd-02a066a4dd0b",
              "967a9716-9555-400b-b215-9a067ebcd7a5",
              "abcc3303-d1d1-44a8-ad71-f25ace6ee31d",
              "a6729e0d-a7c4-4330-be78-578b1295b30b",
              "fe5b0bea-dfd2-46fd-b718-9506d6db1141",
              "99fa3434-db73-4f63-8850-e6f8982500fb",
              "86f90b00-37a9-475b-9878-1a4e76ce6a99",
              "ac2daf0b-7492-4729-abc1-69d3499472df",
              "b279eda3-41ee-4eb3-b9ee-0cc808f3e044",
              "ea1cebb0-1a99-4f4c-a827-3173b031ffca",
              "7fb2fe6f-7146-4f18-ac10-6a6ed62be1d5",
              "5c5df043-14a8-4bb0-98dc-0b3a0b4b8224",
              "e968c221-3d45-47d4-a506-171d06899a18",
              "a31720e5-7514-4a49-a732-45a5711585b7",
              "1a717a76-76e0-4558-92f7-479dd40893dd",
              "c6b64a23-1bbe-4bf8-8bd6-2bd29aeac8f7",
              "f5a6d1e8-2714-464b-9dbc-97a49bb1f647",
              "b4313ebf-110f-4814-a268-03291024bd8d",
              "2b2e94f7-b372-4e00-a9e2-a853ea689ff2",
              "a5da1285-669f-48c3-80ff-c4f5f8dd705f",
              "5bfac0c6-2a06-4d1b-bc99-22fb36f5f564",
              "e1e501ad-c4c2-498a-ad7f-b4e26fba1e11",
              "b81003ed-57de-4bab-bf59-1ef106e74c54",
              "9946f779-c803-4799-962d-c55e9595675b",
              "662f747a-9278-4265-808a-dc5bd15e9d1c",
              "2fa6eb8b-b49d-4011-a469-60b077144839",
              "4e408556-8687-48d3-8d21-855236912042",
              "85df2c1b-33f8-4819-9056-9e12919298d5",
              "7363c346-d3d7-42b3-ab5c-b7d02b644102",
              "39e4c66d-d5f5-4f3e-9b35-6aac99c3f495",
              "395e0c87-bf2b-4362-97f7-c7f1b82413eb",
              "fd79f0f9-9f54-45f0-b570-e828dce66adc",
              "c760943c-468d-436b-954b-ca5fe4047a54",
              "141dc00a-d03f-4a66-898d-06e1b2cfce29",
              "c175f861-aa77-4bcf-89b7-2ae1e041aba3",
              "349c0ffd-a2d5-4f1e-a5dc-c965a345a13f",
              "6091b7ba-b5b6-404f-b6d6-d96e542753ed",
              "22277074-030e-4bcf-9552-2934611d6e58",
              "49d36d6b-e432-46eb-822e-e27353b221cf",
              "74c22119-5b4c-4bf1-9fb6-2726e4f01597",
              "4a94374c-9af8-4794-a146-c9cc2c92e1a8",
              "71d79a65-689f-4834-b474-505f4f41f2ef",
              "e7d45900-4eef-4729-a112-d8fca1691224",
              "e60d552f-fa2c-40d9-98cc-281db30f27be",
              "26266d22-4f4f-435c-9fa6-4a44007b94d5",
              "e058b110-ba30-4b54-9676-11c98bb4dd06",
              "e7adf603-a113-4687-be05-5b944e8a5518",
              "2e905560-8384-4f14-b3cb-771508fcc37a",
              "47bd088f-81cf-4fc7-9ffe-6c34b69b80bc",
              "d591da8a-d0ed-4cab-8a0a-af2c0b3ccc7e",
              "8e6134ce-fb47-4f04-9f13-a1119b6372f6",
              "4dbc3e85-2ee0-43d4-a956-3d5691dc06ca",
              "25e1d319-3f37-4a96-9013-195a5070b95c",
              "0259b4cc-bc96-4d0d-bd01-8fb2442e3ed9",
              "b9e3808e-0a7e-4d9b-951c-df199cfa2344",
              "57b2d7cf-5ccc-462e-a0c4-1365093d0e56",
              "db22630e-86b9-4a57-b003-3905dbfe7540",
              "46bb5417-4f4b-4fb5-ae7e-dcd651e5ffd5",
              "925f4270-c64d-4fbe-9a22-b03aaa7709e4",
              "ba6ac032-61e5-4f7d-be77-9c248b8838cc",
              "742e47f3-cd9f-46e9-9d13-0091c57728db",
              "45a55ea6-dc0e-4472-9063-973153ca3df2",
              "a051f3e4-a715-437f-9112-00f51e5e56ad"
            ],
            "state": "active",
            "storage": null,
            "tags": null,
            "timeouts": null,
            "updated": "2020-11-24T03:37:50Z",
            "user_data": null,
            "wait_for_reservation_deprovision": false
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "access_private_ipv4": "10.68.34.146",
            "access_public_ipv4": "86.109.7.210",
            "access_public_ipv6": "2604:1380:45f1:4600::5",
            "always_pxe": false,
            "billing_cycle": "hourly",
            "created": "2020-11-24T03:16:44Z",
            "deployed_facility": "dc13",
            "description": null,
            "facilities": [
              "dc13"
            ],
            "force_detach_volumes": false,
            "hardware_reservation_id": null,
            "hostname": "esx02",
            "id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "ip_address": [
              {
                "cidr": 29,
                "reservation_ids": [
                  "658b6f88-c604-466b-a20e-1a27e78bbf33"
                ],
                "type": "public_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "private_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "public_ipv6"
              }
            ],
            "ipxe_script_url": "",
            "locked": false,
            "network": [
              {
                "address": "86.109.7.210",
                "cidr": 29,
                "family": 4,
                "gateway": "86.109.7.209",
                "public": true
              },
              {
                "address": "2604:1380:45f1:4600::5",
                "cidr": 127,
                "family": 6,
                "gateway": "2604:1380:45f1:4600::4",
                "public": true
              },
              {
                "address": "10.68.34.146",
                "cidr": 29,
                "family": 4,
                "gateway": "10.68.34.145",
                "public": false
              }
            ],
            "network_type": "layer3",
            "operating_system": "vmware_esxi_7_0",
            "plan": "m3.large.x86",
            "ports": [
              {
                "bonded": true,
                "id": "4d255a85-ddfe-4377-8d1d-84c3e3b1c30b",
                "mac": "",
                "name": "bond0",
                "type": "NetworkBondPort"
              },
              {
                "bonded": true,
                "id": "fbe69832-0fbb-427a-b886-858362cdd8ea",
                "mac": "40:a6:b7:20:1b:d0",
                "name": "eth0",
                "type": "NetworkPort"
              },
              {
                "bonded": true,
                "id": "34de7d4f-b547-4f9b-9f27-204978948be9",
                "mac": "40:a6:b7:20:1b:d1",
                "name": "eth1",
                "type": "NetworkPort"
              }
            ],
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "project_ssh_key_ids": null,
            "root_password": "w02\u003e7DvUu[",
            "ssh_key_ids": [
              "c34821e8-8044-4bef-badc-12689724b38c",
              "0c76a188-4580-4c63-9cef-6d7a086199a1",
              "9934e1a1-71b8-4efe-b2be-0fe2faa0062b",
              "341b4052-e0c2-46d9-97e5-1dcea26e1495",
              "016a76e5-fac3-4f1f-a837-bfea5a14b4f8",
              "68ee8e81-23c9-4942-b445-ee6fcbe54ebe",
              "aaaee5c4-c78d-42fc-a33f-3c55e5843290",
              "76ad052c-e178-4105-9725-6a463dfc2f9e",
              "22145495-82de-4616-96c4-99e5ed775296",
              "0207b96f-0340-4b84-b6d9-dd06e9dea07d",
              "62162bea-3fe2-471d-9438-9ad4c334e418",
              "35760350-cc47-4e4c-8e80-e6b0de24f50f",
              "b0e81c70-1d89-4a4e-9d7f-a35994f17e48",
              "0e66c4c5-ed7d-4dc0-a82d-5ccd9d1f4512",
              "6aa6f547-5698-41e4-8dd1-984fbf0d8623",
              "bea2a7b2-a53b-4088-b24d-b3a42ce74bfa",
              "843c6ee7-2c16-42e7-9ced-f5e0cbb3dc59",
              "d208036c-6283-4109-8a83-2188956de0a4",
              "21c3b8a3-9a45-4a4c-8d4b-1bcea7e6d884",
              "3625a6e0-6568-4117-a1c9-44ebaec72cc3",
              "d29ae957-8382-48ab-a004-aa8c84b3a259",
              "352a121d-a733-4d10-94af-1ff7b1316dee",
              "89be62ef-6f00-42e6-91f2-f1aa8d9fe68f",
              "75e60684-85be-4b69-84fd-3871c9bdc9ce",
              "6f2b2e5d-fbae-4fb5-816c-3bf5db4d8192",
              "c18ac8c1-c445-4229-860b-d541cbcd3f04",
              "44c29f99-7ace-4758-8285-4cae69f49e6d",
              "20d14353-a5e6-42db-b0b7-8d9e2cb50a66",
              "705f1be9-eef6-4944-a3cb-93079dee5f90",
              "fe8d89c8-4f71-46c9-81ed-a9d891d2d0fc",
              "d3b2cf65-a5ef-46f1-8dd8-fa1daab6ccc0",
              "dbba8bba-edaa-4538-bf03-2e52f71130bf",
              "62c90ddc-664e-481c-a6a1-d2f0e874a1cf",
              "ae413fb2-eb14-4581-ab29-3a87a4060abf",
              "65834692-b8e6-484d-81a6-11205d119147",
              "1dee6d51-4147-4de3-a270-7d537a4c36b3",
              "db88edde-1315-47b6-9025-f98ff287b9eb",
              "2381d0f5-c7ba-4d24-afc3-059916291e1b",
              "f6f66a73-00a6-4e45-98e5-fbd2a9e1fc39",
              "35804b20-4c23-4a3e-9e96-6bbe3257d6a7",
              "1b30d6d4-652c-4a0e-8e91-c97bce205705",
              "96f012c7-819e-4a56-8f04-1857ff73d856",
              "89ccbccd-eb91-4797-b90f-cd8457a87f0b",
              "b2383f36-3673-4605-99c6-5743d20e5644",
              "780e7d3c-d468-4830-bd9f-07f19ea8773c",
              "048f58d9-b0b5-426b-9651-7b988bfad853",
              "9f673177-498d-4a1e-aa60-e7d80afe9062",
              "5aaf13c1-3f1d-4e54-9b84-83d40008cfdf",
              "91b82616-e05e-44d6-8045-0660a17d4a1d",
              "d5b8dc6b-842a-4e47-b390-bb390d1cdeb8",
              "6ada7c67-0ee5-49e7-b78c-8163a3d30319",
              "f085ad84-b0a3-47ce-a0eb-30f441ba7ab1",
              "8b560e72-5741-40a4-932c-b1aa09f2a3e8",
              "ad7264eb-8f60-4223-b03b-c25577691434",
              "cff2c7bf-c376-4a42-a12a-8326cd71b149",
              "f098624f-227f-4ca0-b632-ba313128f3af",
              "b611a038-d44b-4f33-af92-085896b79b3b",
              "d9762eb5-f233-45de-9f8e-5cbcc58354b1",
              "3eb37b51-392f-4985-aabe-960042360ae0",
              "3425144d-6868-4032-927f-f5486085ebc2",
              "61c7f4de-0046-4ff1-ba79-35aba1550c79",
              "65ed8cfb-2a46-4c48-85b8-980eedb89add",
              "e2ebeed1-da44-4a4e-aca4-30a1cd36b303",
              "dcb2af48-0326-4f25-a468-fb4a857a0b76",
              "e002537d-b0ac-47fb-a225-96b15c8cd348",
              "427651d6-ecf6-4541-b6f5-f7a469590440",
              "b1188ec9-8aa1-4f44-be04-a164bde80e6e",
              "b99ac23a-5a84-4cdb-8073-6f9e14c7be0f",
              "f7fbcbe5-8875-43b4-8cfd-02a066a4dd0b",
              "967a9716-9555-400b-b215-9a067ebcd7a5",
              "abcc3303-d1d1-44a8-ad71-f25ace6ee31d",
              "a6729e0d-a7c4-4330-be78-578b1295b30b",
              "fe5b0bea-dfd2-46fd-b718-9506d6db1141",
              "99fa3434-db73-4f63-8850-e6f8982500fb",
              "86f90b00-37a9-475b-9878-1a4e76ce6a99",
              "ac2daf0b-7492-4729-abc1-69d3499472df",
              "b279eda3-41ee-4eb3-b9ee-0cc808f3e044",
              "ea1cebb0-1a99-4f4c-a827-3173b031ffca",
              "7fb2fe6f-7146-4f18-ac10-6a6ed62be1d5",
              "5c5df043-14a8-4bb0-98dc-0b3a0b4b8224",
              "e968c221-3d45-47d4-a506-171d06899a18",
              "a31720e5-7514-4a49-a732-45a5711585b7",
              "1a717a76-76e0-4558-92f7-479dd40893dd",
              "c6b64a23-1bbe-4bf8-8bd6-2bd29aeac8f7",
              "f5a6d1e8-2714-464b-9dbc-97a49bb1f647",
              "b4313ebf-110f-4814-a268-03291024bd8d",
              "2b2e94f7-b372-4e00-a9e2-a853ea689ff2",
              "a5da1285-669f-48c3-80ff-c4f5f8dd705f",
              "5bfac0c6-2a06-4d1b-bc99-22fb36f5f564",
              "e1e501ad-c4c2-498a-ad7f-b4e26fba1e11",
              "b81003ed-57de-4bab-bf59-1ef106e74c54",
              "9946f779-c803-4799-962d-c55e9595675b",
              "662f747a-9278-4265-808a-dc5bd15e9d1c",
              "2fa6eb8b-b49d-4011-a469-60b077144839",
              "4e408556-8687-48d3-8d21-855236912042",
              "85df2c1b-33f8-4819-9056-9e12919298d5",
              "7363c346-d3d7-42b3-ab5c-b7d02b644102",
              "39e4c66d-d5f5-4f3e-9b35-6aac99c3f495",
              "395e0c87-bf2b-4362-97f7-c7f1b82413eb",
              "fd79f0f9-9f54-45f0-b570-e828dce66adc",
              "c760943c-468d-436b-954b-ca5fe4047a54",
              "141dc00a-d03f-4a66-898d-06e1b2cfce29",
              "c175f861-aa77-4bcf-89b7-2ae1e041aba3",
              "349c0ffd-a2d5-4f1e-a5dc-c965a345a13f",
              "6091b7ba-b5b6-404f-b6d6-d96e542753ed",
              "22277074-030e-4bcf-9552-2934611d6e58",
              "49d36d6b-e432-46eb-822e-e27353b221cf",
              "74c22119-5b4c-4bf1-9fb6-2726e4f01597",
              "4a94374c-9af8-4794-a146-c9cc2c92e1a8",
              "71d79a65-689f-4834-b474-505f4f41f2ef",
              "e7d45900-4eef-4729-a112-d8fca1691224",
              "e60d552f-fa2c-40d9-98cc-281db30f27be",
              "26266d22-4f4f-435c-9fa6-4a44007b94d5",
              "e058b110-ba30-4b54-9676-11c98bb4dd06",
              "e7adf603-a113-4687-be05-5b944e8a5518",
              "2e905560-8384-4f14-b3cb-771508fcc37a",
              "47bd088f-81cf-4fc7-9ffe-6c34b69b80bc",
              "d591da8a-d0ed-4cab-8a0a-af2c0b3ccc7e",
              "8e6134ce-fb47-4f04-9f13-a1119b6372f6",
              "4dbc3e85-2ee0-43d4-a956-3d5691dc06ca",
              "25e1d319-3f37-4a96-9013-195a5070b95c",
              "0259b4cc-bc96-4d0d-bd01-8fb2442e3ed9",
              "b9e3808e-0a7e-4d9b-951c-df199cfa2344",
              "57b2d7cf-5ccc-462e-a0c4-1365093d0e56",
              "db22630e-86b9-4a57-b003-3905dbfe7540",
              "46bb5417-4f4b-4fb5-ae7e-dcd651e5ffd5",
              "925f4270-c64d-4fbe-9a22-b03aaa7709e4",
              "ba6ac032-61e5-4f7d-be77-9c248b8838cc",
              "742e47f3-cd9f-46e9-9d13-0091c57728db",
              "45a55ea6-dc0e-4472-9063-973153ca3df2",
              "a051f3e4-a715-437f-9112-00f51e5e56ad"
            ],
            "state": "active",
            "storage": null,
            "tags": null,
            "timeouts": null,
            "updated": "2020-11-24T03:37:17Z",
            "user_data": null,
            "wait_for_reservation_deprovision": false
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "access_private_ipv4": "10.68.34.138",
            "access_public_ipv4": "86.109.7.218",
            "access_public_ipv6": "2604:1380:45f1:4600::3",
            "always_pxe": false,
            "billing_cycle": "hourly",
            "created": "2020-11-24T03:16:44Z",
            "deployed_facility": "dc13",
            "description": null,
            "facilities": [
              "dc13"
            ],
            "force_detach_volumes": false,
            "hardware_reservation_id": null,
            "hostname": "esx03",
            "id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "ip_address": [
              {
                "cidr": 29,
                "reservation_ids": [
                  "d45bd1e8-755d-45fa-8bdf-64a7db499b79"
                ],
                "type": "public_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "private_ipv4"
              },
              {
                "cidr": 0,
                "reservation_ids": null,
                "type": "public_ipv6"
              }
            ],
            "ipxe_script_url": "",
            "locked": false,
            "network": [
              {
                "address": "86.109.7.218",
                "cidr": 29,
                "family": 4,
                "gateway": "86.109.7.217",
                "public": true
              },
              {
                "address": "2604:1380:45f1:4600::3",
                "cidr": 127,
                "family": 6,
                "gateway": "2604:1380:45f1:4600::2",
                "public": true
              },
              {
                "address": "10.68.34.138",
                "cidr": 29,
                "family": 4,
                "gateway": "10.68.34.137",
                "public": false
              }
            ],
            "network_type": "layer3",
            "operating_system": "vmware_esxi_7_0",
            "plan": "m3.large.x86",
            "ports": [
              {
                "bonded": true,
                "id": "cc393d20-24be-4240-9de9-2adaa7ee8def",
                "mac": "",
                "name": "bond0",
                "type": "NetworkBondPort"
              },
              {
                "bonded": true,
                "id": "faf4b8bf-f0e3-46ce-b065-80f98d36013d",
                "mac": "40:a6:b7:1b:5e:00",
                "name": "eth0",
                "type": "NetworkPort"
              },
              {
                "bonded": true,
                "id": "2f5afadc-be72-4335-8abc-d182c7a79750",
                "mac": "40:a6:b7:1b:5e:01",
                "name": "eth1",
                "type": "NetworkPort"
              }
            ],
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "project_ssh_key_ids": null,
            "root_password": "vK/7?3uD5=",
            "ssh_key_ids": [
              "c34821e8-8044-4bef-badc-12689724b38c",
              "0c76a188-4580-4c63-9cef-6d7a086199a1",
              "9934e1a1-71b8-4efe-b2be-0fe2faa0062b",
              "341b4052-e0c2-46d9-97e5-1dcea26e1495",
              "016a76e5-fac3-4f1f-a837-bfea5a14b4f8",
              "68ee8e81-23c9-4942-b445-ee6fcbe54ebe",
              "aaaee5c4-c78d-42fc-a33f-3c55e5843290",
              "76ad052c-e178-4105-9725-6a463dfc2f9e",
              "22145495-82de-4616-96c4-99e5ed775296",
              "0207b96f-0340-4b84-b6d9-dd06e9dea07d",
              "62162bea-3fe2-471d-9438-9ad4c334e418",
              "35760350-cc47-4e4c-8e80-e6b0de24f50f",
              "b0e81c70-1d89-4a4e-9d7f-a35994f17e48",
              "0e66c4c5-ed7d-4dc0-a82d-5ccd9d1f4512",
              "6aa6f547-5698-41e4-8dd1-984fbf0d8623",
              "bea2a7b2-a53b-4088-b24d-b3a42ce74bfa",
              "843c6ee7-2c16-42e7-9ced-f5e0cbb3dc59",
              "d208036c-6283-4109-8a83-2188956de0a4",
              "21c3b8a3-9a45-4a4c-8d4b-1bcea7e6d884",
              "3625a6e0-6568-4117-a1c9-44ebaec72cc3",
              "d29ae957-8382-48ab-a004-aa8c84b3a259",
              "352a121d-a733-4d10-94af-1ff7b1316dee",
              "89be62ef-6f00-42e6-91f2-f1aa8d9fe68f",
              "75e60684-85be-4b69-84fd-3871c9bdc9ce",
              "6f2b2e5d-fbae-4fb5-816c-3bf5db4d8192",
              "c18ac8c1-c445-4229-860b-d541cbcd3f04",
              "44c29f99-7ace-4758-8285-4cae69f49e6d",
              "20d14353-a5e6-42db-b0b7-8d9e2cb50a66",
              "705f1be9-eef6-4944-a3cb-93079dee5f90",
              "fe8d89c8-4f71-46c9-81ed-a9d891d2d0fc",
              "d3b2cf65-a5ef-46f1-8dd8-fa1daab6ccc0",
              "dbba8bba-edaa-4538-bf03-2e52f71130bf",
              "62c90ddc-664e-481c-a6a1-d2f0e874a1cf",
              "ae413fb2-eb14-4581-ab29-3a87a4060abf",
              "65834692-b8e6-484d-81a6-11205d119147",
              "1dee6d51-4147-4de3-a270-7d537a4c36b3",
              "db88edde-1315-47b6-9025-f98ff287b9eb",
              "2381d0f5-c7ba-4d24-afc3-059916291e1b",
              "f6f66a73-00a6-4e45-98e5-fbd2a9e1fc39",
              "35804b20-4c23-4a3e-9e96-6bbe3257d6a7",
              "1b30d6d4-652c-4a0e-8e91-c97bce205705",
              "96f012c7-819e-4a56-8f04-1857ff73d856",
              "89ccbccd-eb91-4797-b90f-cd8457a87f0b",
              "b2383f36-3673-4605-99c6-5743d20e5644",
              "780e7d3c-d468-4830-bd9f-07f19ea8773c",
              "048f58d9-b0b5-426b-9651-7b988bfad853",
              "9f673177-498d-4a1e-aa60-e7d80afe9062",
              "5aaf13c1-3f1d-4e54-9b84-83d40008cfdf",
              "91b82616-e05e-44d6-8045-0660a17d4a1d",
              "d5b8dc6b-842a-4e47-b390-bb390d1cdeb8",
              "6ada7c67-0ee5-49e7-b78c-8163a3d30319",
              "f085ad84-b0a3-47ce-a0eb-30f441ba7ab1",
              "8b560e72-5741-40a4-932c-b1aa09f2a3e8",
              "ad7264eb-8f60-4223-b03b-c25577691434",
              "cff2c7bf-c376-4a42-a12a-8326cd71b149",
              "f098624f-227f-4ca0-b632-ba313128f3af",
              "b611a038-d44b-4f33-af92-085896b79b3b",
              "d9762eb5-f233-45de-9f8e-5cbcc58354b1",
              "3eb37b51-392f-4985-aabe-960042360ae0",
              "3425144d-6868-4032-927f-f5486085ebc2",
              "61c7f4de-0046-4ff1-ba79-35aba1550c79",
              "65ed8cfb-2a46-4c48-85b8-980eedb89add",
              "e2ebeed1-da44-4a4e-aca4-30a1cd36b303",
              "dcb2af48-0326-4f25-a468-fb4a857a0b76",
              "e002537d-b0ac-47fb-a225-96b15c8cd348",
              "427651d6-ecf6-4541-b6f5-f7a469590440",
              "b1188ec9-8aa1-4f44-be04-a164bde80e6e",
              "b99ac23a-5a84-4cdb-8073-6f9e14c7be0f",
              "f7fbcbe5-8875-43b4-8cfd-02a066a4dd0b",
              "967a9716-9555-400b-b215-9a067ebcd7a5",
              "abcc3303-d1d1-44a8-ad71-f25ace6ee31d",
              "a6729e0d-a7c4-4330-be78-578b1295b30b",
              "fe5b0bea-dfd2-46fd-b718-9506d6db1141",
              "99fa3434-db73-4f63-8850-e6f8982500fb",
              "86f90b00-37a9-475b-9878-1a4e76ce6a99",
              "ac2daf0b-7492-4729-abc1-69d3499472df",
              "b279eda3-41ee-4eb3-b9ee-0cc808f3e044",
              "ea1cebb0-1a99-4f4c-a827-3173b031ffca",
              "7fb2fe6f-7146-4f18-ac10-6a6ed62be1d5",
              "5c5df043-14a8-4bb0-98dc-0b3a0b4b8224",
              "e968c221-3d45-47d4-a506-171d06899a18",
              "a31720e5-7514-4a49-a732-45a5711585b7",
              "1a717a76-76e0-4558-92f7-479dd40893dd",
              "c6b64a23-1bbe-4bf8-8bd6-2bd29aeac8f7",
              "f5a6d1e8-2714-464b-9dbc-97a49bb1f647",
              "b4313ebf-110f-4814-a268-03291024bd8d",
              "2b2e94f7-b372-4e00-a9e2-a853ea689ff2",
              "a5da1285-669f-48c3-80ff-c4f5f8dd705f",
              "5bfac0c6-2a06-4d1b-bc99-22fb36f5f564",
              "e1e501ad-c4c2-498a-ad7f-b4e26fba1e11",
              "b81003ed-57de-4bab-bf59-1ef106e74c54",
              "9946f779-c803-4799-962d-c55e9595675b",
              "662f747a-9278-4265-808a-dc5bd15e9d1c",
              "2fa6eb8b-b49d-4011-a469-60b077144839",
              "4e408556-8687-48d3-8d21-855236912042",
              "85df2c1b-33f8-4819-9056-9e12919298d5",
              "7363c346-d3d7-42b3-ab5c-b7d02b644102",
              "39e4c66d-d5f5-4f3e-9b35-6aac99c3f495",
              "395e0c87-bf2b-4362-97f7-c7f1b82413eb",
              "fd79f0f9-9f54-45f0-b570-e828dce66adc",
              "c760943c-468d-436b-954b-ca5fe4047a54",
              "141dc00a-d03f-4a66-898d-06e1b2cfce29",
              "c175f861-aa77-4bcf-89b7-2ae1e041aba3",
              "349c0ffd-a2d5-4f1e-a5dc-c965a345a13f",
              "6091b7ba-b5b6-404f-b6d6-d96e542753ed",
              "22277074-030e-4bcf-9552-2934611d6e58",
              "49d36d6b-e432-46eb-822e-e27353b221cf",
              "74c22119-5b4c-4bf1-9fb6-2726e4f01597",
              "4a94374c-9af8-4794-a146-c9cc2c92e1a8",
              "71d79a65-689f-4834-b474-505f4f41f2ef",
              "e7d45900-4eef-4729-a112-d8fca1691224",
              "e60d552f-fa2c-40d9-98cc-281db30f27be",
              "26266d22-4f4f-435c-9fa6-4a44007b94d5",
              "e058b110-ba30-4b54-9676-11c98bb4dd06",
              "e7adf603-a113-4687-be05-5b944e8a5518",
              "2e905560-8384-4f14-b3cb-771508fcc37a",
              "47bd088f-81cf-4fc7-9ffe-6c34b69b80bc",
              "d591da8a-d0ed-4cab-8a0a-af2c0b3ccc7e",
              "8e6134ce-fb47-4f04-9f13-a1119b6372f6",
              "4dbc3e85-2ee0-43d4-a956-3d5691dc06ca",
              "25e1d319-3f37-4a96-9013-195a5070b95c",
              "0259b4cc-bc96-4d0d-bd01-8fb2442e3ed9",
              "b9e3808e-0a7e-4d9b-951c-df199cfa2344",
              "57b2d7cf-5ccc-462e-a0c4-1365093d0e56",
              "db22630e-86b9-4a57-b003-3905dbfe7540",
              "46bb5417-4f4b-4fb5-ae7e-dcd651e5ffd5",
              "925f4270-c64d-4fbe-9a22-b03aaa7709e4",
              "ba6ac032-61e5-4f7d-be77-9c248b8838cc",
              "742e47f3-cd9f-46e9-9d13-0091c57728db",
              "45a55ea6-dc0e-4472-9063-973153ca3df2",
              "a051f3e4-a715-437f-9112-00f51e5e56ad"
            ],
            "state": "active",
            "storage": null,
            "tags": null,
            "timeouts": null,
            "updated": "2020-11-24T03:37:26Z",
            "user_data": null,
            "wait_for_reservation_deprovision": false
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_device",
      "name": "router",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_private_ipv4": "10.68.34.133",
            "access_public_ipv4": "136.144.56.245",
            "access_public_ipv6": "2604:1380:45f1:4600::1",
            "always_pxe": false,
            "billing_cycle": "hourly",
            "created": "2020-11-24T03:16:43Z",
            "deployed_facility": "dc13",
            "description": null,
            "facilities": [
              "dc13"
            ],
            "force_detach_volumes": false,
            "hardware_reservation_id": null,
            "hostname": "edge-gateway",
            "id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "ip_address": [],
            "ipxe_script_url": "",
            "locked": false,
            "network": [
              {
                "address": "136.144.56.245",
                "cidr": 31,
                "family": 4,
                "gateway": "136.144.56.244",
                "public": true
              },
              {
                "address": "2604:1380:45f1:4600::1",
                "cidr": 127,
                "family": 6,
                "gateway": "2604:1380:45f1:4600::",
                "public": true
              },
              {
                "address": "10.68.34.133",
                "cidr": 31,
                "family": 4,
                "gateway": "10.68.34.132",
                "public": false
              }
            ],
            "network_type": "layer3",
            "operating_system": "ubuntu_18_04",
            "plan": "c3.medium.x86",
            "ports": [
              {
                "bonded": true,
                "id": "b2a58931-d599-4c7e-9e3a-8125c3384b53",
                "mac": "",
                "name": "bond0",
                "type": "NetworkBondPort"
              },
              {
                "bonded": true,
                "id": "b3225a03-057e-456d-8207-310660bede0d",
                "mac": "f8:f2:1e:a1:09:60",
                "name": "eth0",
                "type": "NetworkPort"
              },
              {
                "bonded": true,
                "id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d",
                "mac": "f8:f2:1e:a1:09:61",
                "name": "eth1",
                "type": "NetworkPort"
              }
            ],
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "project_ssh_key_ids": null,
            "root_password": "0mO60x(_[D",
            "ssh_key_ids": [
              "c34821e8-8044-4bef-badc-12689724b38c",
              "0c76a188-4580-4c63-9cef-6d7a086199a1",
              "9934e1a1-71b8-4efe-b2be-0fe2faa0062b",
              "341b4052-e0c2-46d9-97e5-1dcea26e1495",
              "016a76e5-fac3-4f1f-a837-bfea5a14b4f8",
              "68ee8e81-23c9-4942-b445-ee6fcbe54ebe",
              "aaaee5c4-c78d-42fc-a33f-3c55e5843290",
              "76ad052c-e178-4105-9725-6a463dfc2f9e",
              "22145495-82de-4616-96c4-99e5ed775296",
              "0207b96f-0340-4b84-b6d9-dd06e9dea07d",
              "62162bea-3fe2-471d-9438-9ad4c334e418",
              "35760350-cc47-4e4c-8e80-e6b0de24f50f",
              "b0e81c70-1d89-4a4e-9d7f-a35994f17e48",
              "0e66c4c5-ed7d-4dc0-a82d-5ccd9d1f4512",
              "6aa6f547-5698-41e4-8dd1-984fbf0d8623",
              "bea2a7b2-a53b-4088-b24d-b3a42ce74bfa",
              "843c6ee7-2c16-42e7-9ced-f5e0cbb3dc59",
              "d208036c-6283-4109-8a83-2188956de0a4",
              "21c3b8a3-9a45-4a4c-8d4b-1bcea7e6d884",
              "3625a6e0-6568-4117-a1c9-44ebaec72cc3",
              "d29ae957-8382-48ab-a004-aa8c84b3a259",
              "352a121d-a733-4d10-94af-1ff7b1316dee",
              "89be62ef-6f00-42e6-91f2-f1aa8d9fe68f",
              "75e60684-85be-4b69-84fd-3871c9bdc9ce",
              "6f2b2e5d-fbae-4fb5-816c-3bf5db4d8192",
              "c18ac8c1-c445-4229-860b-d541cbcd3f04",
              "44c29f99-7ace-4758-8285-4cae69f49e6d",
              "20d14353-a5e6-42db-b0b7-8d9e2cb50a66",
              "705f1be9-eef6-4944-a3cb-93079dee5f90",
              "fe8d89c8-4f71-46c9-81ed-a9d891d2d0fc",
              "d3b2cf65-a5ef-46f1-8dd8-fa1daab6ccc0",
              "dbba8bba-edaa-4538-bf03-2e52f71130bf",
              "62c90ddc-664e-481c-a6a1-d2f0e874a1cf",
              "ae413fb2-eb14-4581-ab29-3a87a4060abf",
              "65834692-b8e6-484d-81a6-11205d119147",
              "1dee6d51-4147-4de3-a270-7d537a4c36b3",
              "db88edde-1315-47b6-9025-f98ff287b9eb",
              "2381d0f5-c7ba-4d24-afc3-059916291e1b",
              "f6f66a73-00a6-4e45-98e5-fbd2a9e1fc39",
              "35804b20-4c23-4a3e-9e96-6bbe3257d6a7",
              "1b30d6d4-652c-4a0e-8e91-c97bce205705",
              "96f012c7-819e-4a56-8f04-1857ff73d856",
              "89ccbccd-eb91-4797-b90f-cd8457a87f0b",
              "b2383f36-3673-4605-99c6-5743d20e5644",
              "780e7d3c-d468-4830-bd9f-07f19ea8773c",
              "048f58d9-b0b5-426b-9651-7b988bfad853",
              "9f673177-498d-4a1e-aa60-e7d80afe9062",
              "5aaf13c1-3f1d-4e54-9b84-83d40008cfdf",
              "91b82616-e05e-44d6-8045-0660a17d4a1d",
              "d5b8dc6b-842a-4e47-b390-bb390d1cdeb8",
              "6ada7c67-0ee5-49e7-b78c-8163a3d30319",
              "f085ad84-b0a3-47ce-a0eb-30f441ba7ab1",
              "8b560e72-5741-40a4-932c-b1aa09f2a3e8",
              "ad7264eb-8f60-4223-b03b-c25577691434",
              "cff2c7bf-c376-4a42-a12a-8326cd71b149",
              "f098624f-227f-4ca0-b632-ba313128f3af",
              "b611a038-d44b-4f33-af92-085896b79b3b",
              "d9762eb5-f233-45de-9f8e-5cbcc58354b1",
              "3eb37b51-392f-4985-aabe-960042360ae0",
              "3425144d-6868-4032-927f-f5486085ebc2",
              "61c7f4de-0046-4ff1-ba79-35aba1550c79",
              "65ed8cfb-2a46-4c48-85b8-980eedb89add",
              "e2ebeed1-da44-4a4e-aca4-30a1cd36b303",
              "dcb2af48-0326-4f25-a468-fb4a857a0b76",
              "e002537d-b0ac-47fb-a225-96b15c8cd348",
              "427651d6-ecf6-4541-b6f5-f7a469590440",
              "b1188ec9-8aa1-4f44-be04-a164bde80e6e",
              "b99ac23a-5a84-4cdb-8073-6f9e14c7be0f",
              "f7fbcbe5-8875-43b4-8cfd-02a066a4dd0b",
              "967a9716-9555-400b-b215-9a067ebcd7a5",
              "abcc3303-d1d1-44a8-ad71-f25ace6ee31d",
              "a6729e0d-a7c4-4330-be78-578b1295b30b",
              "fe5b0bea-dfd2-46fd-b718-9506d6db1141",
              "99fa3434-db73-4f63-8850-e6f8982500fb",
              "86f90b00-37a9-475b-9878-1a4e76ce6a99",
              "ac2daf0b-7492-4729-abc1-69d3499472df",
              "b279eda3-41ee-4eb3-b9ee-0cc808f3e044",
              "ea1cebb0-1a99-4f4c-a827-3173b031ffca",
              "7fb2fe6f-7146-4f18-ac10-6a6ed62be1d5",
              "5c5df043-14a8-4bb0-98dc-0b3a0b4b8224",
              "e968c221-3d45-47d4-a506-171d06899a18",
              "a31720e5-7514-4a49-a732-45a5711585b7",
              "1a717a76-76e0-4558-92f7-479dd40893dd",
              "c6b64a23-1bbe-4bf8-8bd6-2bd29aeac8f7",
              "f5a6d1e8-2714-464b-9dbc-97a49bb1f647",
              "b4313ebf-110f-4814-a268-03291024bd8d",
              "2b2e94f7-b372-4e00-a9e2-a853ea689ff2",
              "a5da1285-669f-48c3-80ff-c4f5f8dd705f",
              "5bfac0c6-2a06-4d1b-bc99-22fb36f5f564",
              "e1e501ad-c4c2-498a-ad7f-b4e26fba1e11",
              "b81003ed-57de-4bab-bf59-1ef106e74c54",
              "9946f779-c803-4799-962d-c55e9595675b",
              "662f747a-9278-4265-808a-dc5bd15e9d1c",
              "2fa6eb8b-b49d-4011-a469-60b077144839",
              "4e408556-8687-48d3-8d21-855236912042",
              "85df2c1b-33f8-4819-9056-9e12919298d5",
              "7363c346-d3d7-42b3-ab5c-b7d02b644102",
              "39e4c66d-d5f5-4f3e-9b35-6aac99c3f495",
              "395e0c87-bf2b-4362-97f7-c7f1b82413eb",
              "fd79f0f9-9f54-45f0-b570-e828dce66adc",
              "c760943c-468d-436b-954b-ca5fe4047a54",
              "141dc00a-d03f-4a66-898d-06e1b2cfce29",
              "c175f861-aa77-4bcf-89b7-2ae1e041aba3",
              "349c0ffd-a2d5-4f1e-a5dc-c965a345a13f",
              "6091b7ba-b5b6-404f-b6d6-d96e542753ed",
              "22277074-030e-4bcf-9552-2934611d6e58",
              "49d36d6b-e432-46eb-822e-e27353b221cf",
              "74c22119-5b4c-4bf1-9fb6-2726e4f01597",
              "4a94374c-9af8-4794-a146-c9cc2c92e1a8",
              "71d79a65-689f-4834-b474-505f4f41f2ef",
              "e7d45900-4eef-4729-a112-d8fca1691224",
              "e60d552f-fa2c-40d9-98cc-281db30f27be",
              "26266d22-4f4f-435c-9fa6-4a44007b94d5",
              "e058b110-ba30-4b54-9676-11c98bb4dd06",
              "e7adf603-a113-4687-be05-5b944e8a5518",
              "2e905560-8384-4f14-b3cb-771508fcc37a",
              "47bd088f-81cf-4fc7-9ffe-6c34b69b80bc",
              "d591da8a-d0ed-4cab-8a0a-af2c0b3ccc7e",
              "8e6134ce-fb47-4f04-9f13-a1119b6372f6",
              "4dbc3e85-2ee0-43d4-a956-3d5691dc06ca",
              "25e1d319-3f37-4a96-9013-195a5070b95c",
              "0259b4cc-bc96-4d0d-bd01-8fb2442e3ed9",
              "b9e3808e-0a7e-4d9b-951c-df199cfa2344",
              "57b2d7cf-5ccc-462e-a0c4-1365093d0e56",
              "db22630e-86b9-4a57-b003-3905dbfe7540",
              "46bb5417-4f4b-4fb5-ae7e-dcd651e5ffd5",
              "925f4270-c64d-4fbe-9a22-b03aaa7709e4",
              "ba6ac032-61e5-4f7d-be77-9c248b8838cc",
              "742e47f3-cd9f-46e9-9d13-0091c57728db",
              "45a55ea6-dc0e-4472-9063-973153ca3df2",
              "a051f3e4-a715-437f-9112-00f51e5e56ad"
            ],
            "state": "active",
            "storage": null,
            "tags": null,
            "timeouts": null,
            "updated": "2020-11-24T03:19:45Z",
            "user_data": "#!/usr/bin/python3\nimport json\nimport apt\nimport os\nimport ipaddress\nimport urllib.request as urllib2\nimport random\n\n# Vars from Terraform\nprivate_subnets = '[{\"cidr\":\"172.16.0.0/24\",\"name\":\"VM Private Net 1\",\"nat\":true,\"routable\":true,\"vsphere_service_type\":null},{\"cidr\":\"172.16.1.0/24\",\"name\":\"vMotion\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vmotion\"},{\"cidr\":\"172.16.2.0/24\",\"name\":\"vSAN\",\"nat\":false,\"routable\":false,\"vsphere_service_type\":\"vsan\"}]'\nprivate_vlans = '[1074,1072,1073]'\npublic_subnets = '[{\"ip_count\":16,\"name\":\"VM Public Net 1\",\"nat\":false,\"routable\":true,\"vsphere_service_type\":\"management\"}]'\npublic_vlans = '[1075]'\npublic_cidrs = '[\"86.109.7.160/28\"]'\ndomain_name = 'equinix-metal.local'\n\n\ndef words_list():\n    word_site = \"https://raw.githubusercontent.com/taikuukaits/SimpleWordlists/master/Wordlist-Nouns-Common-Audited-Len-3-6.txt\"\n    response = urllib2.urlopen(word_site)\n    word_list = response.read().splitlines()\n    words = []\n    for word in word_list:\n        if 4 \u003c= len(word) \u003c= 5:\n            words.append(word.decode().lower())\n    return words\n\n\n# Get random word list\nwords = words_list()\n\n# Allow\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v4 boolean true' | sudo debconf-set-selections\")\nos.system(\"echo 'iptables-persistent iptables-persistent/autosave_v6 boolean true' | sudo debconf-set-selections\")\n\n# Disable systemd-resolved\nos.system(\"systemctl stop systemd-resolved\")\nos.system(\"systemctl disable systemd-resolved\")\n\n# Install Apt Packages\nos.system('DEBIAN_FRONTEND=noninteractive apt-get update -y')\nos.system('DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::=\"--force-confold\" --force-yes -y dnsmasq vlan iptables-persistent conntrack python3-pip')\n\n# Build single subnet map with all vlans, cidrs, etc...\nsubnets = json.loads(private_subnets)\nprivate_vlans = json.loads(private_vlans)\npublic_subnets = json.loads(public_subnets)\npublic_vlans = json.loads(public_vlans)\npublic_cidrs = json.loads(public_cidrs)\n\nfor i in range(0, len(private_vlans)):\n    subnets[i]['vlan'] = private_vlans[i]\n\nfor i in range(0, len(public_vlans)):\n    public_subnets[i]['vlan'] = public_vlans[i]\n    public_subnets[i]['cidr'] = public_cidrs[i]\n    subnets.append(public_subnets[i])\n\n# Wipe second Network Interface from config file\nreadFile = open(\"/etc/network/interfaces\")\nlines = readFile.readlines()\nreadFile.close()\nfor line in reversed(lines):\n    if \"auto\" in line:\n        split_line = line.split()\n        interface = split_line[-1]\n        break\nlines = lines[:-5]\n\n# Ensure 8021q and remove the second interface from the bond\nos.system(\"modprobe 8021q\")\nos.system(\"ifdown {}\".format(interface))\n\n# Make sure 8021q is loaded at startup\nmodules_file = open(\"/etc/modules-load.d/modules.conf\", \"a+\")\nmodules_file.write(\"\\n8021q\\n\")\nmodules_file.close()\n\n# Setup syctl parameters for routing\nsysctl_file = open(\"/etc/sysctl.conf\", \"a+\")\nsysctl_file.write(\"\\n\\n#Routing parameters\\n\")\nsysctl_file.write(\"net.ipv4.conf.all.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.conf.default.rp_filter=0\\n\")\nsysctl_file.write(\"net.ipv4.ip_forward=1\\n\")\nsysctl_file.write(\"net.ipv4.tcp_mtu_probing=2\\n\")\nsysctl_file.close()\n\n# Apply sysctl parameters\nos.system(\"sysctl -p\")\n\n# Remove old conf for second interface\ninterface_file = open('/etc/network/interfaces', 'w')\nfor line in lines:\n    interface_file.write(line)\n\n# Add new conf for second physical interface\ninterface_file.write(\"\\nauto {}\\n\".format(interface))\ninterface_file.write(\"iface {} inet manual\\n\".format(interface))\ninterface_file.write(\"\\tmtu 9000\\n\")\n\n# Open dnsmasq config for writing\ndnsmasq_conf = open('/etc/dnsmasq.d/dhcp.conf', 'w')\n\n# Loop though all subnets and setup Interfaces, DNSMasq, \u0026 IPTables\nfor subnet in subnets:\n    if subnet['routable']:\n        # Find vCenter IP\n        if subnet['vsphere_service_type'] == 'management':\n            vcenter_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        # Gather network facts about this subnet\n        router_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[0].compressed\n        low_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[1].compressed\n        high_ip = list(ipaddress.ip_network(subnet['cidr']).hosts())[-1].compressed\n        netmask = ipaddress.ip_network(subnet['cidr']).netmask.compressed\n\n        # Setup vLan interface for this subnet\n        interface_file.write(\"\\nauto {}.{}\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"iface {}.{} inet static\\n\".format(interface, subnet['vlan']))\n        interface_file.write(\"\\taddress {}\\n\".format(router_ip))\n        interface_file.write(\"\\tnetmask {}\\n\".format(netmask))\n        interface_file.write(\"\\tvlan-raw-device {}\\n\".format(interface))\n        interface_file.write(\"\\tmtu 9000\\n\")\n\n        # Generate random name for the network\n        word = random.choice(words)\n        words.remove(word)\n\n        # Write dnsmasq dhcp scopes\n        dnsmasq_conf.write(\"dhcp-range=set:{},{},{},2h\\n\".format(word, low_ip, high_ip))\n        dnsmasq_conf.write(\"dhcp-option=tag:{},option:router,{}\\n\".format(word, router_ip))\n\n        # Create NAT rule for this network if the network is tagged as NAT\n        if subnet['nat']:\n            os.system(\"iptables -t nat -A POSTROUTING -o bond0 -j MASQUERADE -s {}\".format(subnet['cidr']))\n\ninterface_file.close()\n\n# Reserver the vCenter IP\ndnsmasq_conf.write(\"\\ndhcp-host=00:00:00:00:00:99, {} # vCenter IP\\n\".format(vcenter_ip))\n\ndnsmasq_conf.close()\n\n# DNS record for vCenter\netc_hosts = open('/etc/hosts', 'a+')\netc_hosts.write('\\n{}\\tvcva\\tvcva.{}\\n'.format(vcenter_ip, domain_name))\netc_hosts.close()\n\n# Add domain to host\nresolv_conf = open('/etc/resolv.conf', 'a+')\nresolv_conf.write('\\ndomain {}\\nsearch {}\\n'.format(domain_name, domain_name))\nresolv_conf.close()\n\n# Block DNSMasq out the WAN\nos.system(\"iptables -I INPUT -p udp --dport 67 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p udp --dport 53 -i bond0 -j DROP\")\nos.system(\"iptables -I INPUT -p tcp --dport 53 -i bond0 -j DROP\")\n\n# Bring up newly configured interfaces\nos.system(\"ifup --all\")\n\n# Remove a saftey measure from dnsmasq that blocks VPN users from using DNS\nos.system(\"sed -i 's/ --local-service//g' /etc/init.d/dnsmasq\")\n\n# Restart dnsmasq service\nos.system(\"systemctl restart dnsmasq\")\n\n# Save iptables rules\nos.system(\"iptables-save \u003e /etc/iptables/rules.v4\")\n\n# Install python modules\nos.system(\"pip3 install --upgrade pip pyvmomi packet-python\")\n",
            "wait_for_reservation_deprovision": false
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "data.template_file.user_data",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_device_network_type",
      "name": "esxi_hosts",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "device_id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "type": "hybrid"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "device_id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "type": "hybrid"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "device_id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "type": "hybrid"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_device_network_type",
      "name": "router",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "type": "hybrid"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_ip_attachment",
      "name": "block_assignment",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "address": "86.109.7.162",
            "address_family": 4,
            "cidr": 28,
            "cidr_notation": "86.109.7.160/28",
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "gateway": "86.109.7.161",
            "global": false,
            "id": "7e15a471-e101-479e-82aa-a39b91d2aa74",
            "manageable": true,
            "management": false,
            "netmask": "255.255.255.240",
            "network": "86.109.7.160",
            "public": true
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_port_vlan_attachment",
      "name": "esxi_priv_vlan_attach",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "device_id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "force_bond": false,
            "id": "dc86673c-64b8-4282-b7c9-bef24c050cf6:32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "native": false,
            "port_id": "dc86673c-64b8-4282-b7c9-bef24c050cf6",
            "port_name": "eth1",
            "vlan_id": "32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "vlan_vnid": 1074
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "device_id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "force_bond": false,
            "id": "34de7d4f-b547-4f9b-9f27-204978948be9:64d980a6-0864-4c0b-a897-db1eef74ed09",
            "native": false,
            "port_id": "34de7d4f-b547-4f9b-9f27-204978948be9",
            "port_name": "eth1",
            "vlan_id": "64d980a6-0864-4c0b-a897-db1eef74ed09",
            "vlan_vnid": 1072
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "device_id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "force_bond": false,
            "id": "34de7d4f-b547-4f9b-9f27-204978948be9:088ffdd6-aba0-434e-b312-da65539ee2c5",
            "native": false,
            "port_id": "34de7d4f-b547-4f9b-9f27-204978948be9",
            "port_name": "eth1",
            "vlan_id": "088ffdd6-aba0-434e-b312-da65539ee2c5",
            "vlan_vnid": 1073
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "device_id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "force_bond": false,
            "id": "34de7d4f-b547-4f9b-9f27-204978948be9:32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "native": false,
            "port_id": "34de7d4f-b547-4f9b-9f27-204978948be9",
            "port_name": "eth1",
            "vlan_id": "32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "vlan_vnid": 1074
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "device_id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "force_bond": false,
            "id": "2f5afadc-be72-4335-8abc-d182c7a79750:64d980a6-0864-4c0b-a897-db1eef74ed09",
            "native": false,
            "port_id": "2f5afadc-be72-4335-8abc-d182c7a79750",
            "port_name": "eth1",
            "vlan_id": "64d980a6-0864-4c0b-a897-db1eef74ed09",
            "vlan_vnid": 1072
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "device_id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "force_bond": false,
            "id": "2f5afadc-be72-4335-8abc-d182c7a79750:088ffdd6-aba0-434e-b312-da65539ee2c5",
            "native": false,
            "port_id": "2f5afadc-be72-4335-8abc-d182c7a79750",
            "port_name": "eth1",
            "vlan_id": "088ffdd6-aba0-434e-b312-da65539ee2c5",
            "vlan_vnid": 1073
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "device_id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "force_bond": false,
            "id": "2f5afadc-be72-4335-8abc-d182c7a79750:32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "native": false,
            "port_id": "2f5afadc-be72-4335-8abc-d182c7a79750",
            "port_name": "eth1",
            "vlan_id": "32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "vlan_vnid": 1074
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 7,
          "schema_version": 0,
          "attributes": {
            "device_id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "force_bond": false,
            "id": "dc86673c-64b8-4282-b7c9-bef24c050cf6:64d980a6-0864-4c0b-a897-db1eef74ed09",
            "native": false,
            "port_id": "dc86673c-64b8-4282-b7c9-bef24c050cf6",
            "port_name": "eth1",
            "vlan_id": "64d980a6-0864-4c0b-a897-db1eef74ed09",
            "vlan_vnid": 1072
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        },
        {
          "index_key": 8,
          "schema_version": 0,
          "attributes": {
            "device_id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "force_bond": false,
            "id": "dc86673c-64b8-4282-b7c9-bef24c050cf6:088ffdd6-aba0-434e-b312-da65539ee2c5",
            "native": false,
            "port_id": "dc86673c-64b8-4282-b7c9-bef24c050cf6",
            "port_name": "eth1",
            "vlan_id": "088ffdd6-aba0-434e-b312-da65539ee2c5",
            "vlan_vnid": 1073
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.private_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_port_vlan_attachment",
      "name": "esxi_pub_vlan_attach",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "device_id": "a3507a9f-6cdf-4e4b-97f0-5231b3ddf430",
            "force_bond": false,
            "id": "dc86673c-64b8-4282-b7c9-bef24c050cf6:9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "native": false,
            "port_id": "dc86673c-64b8-4282-b7c9-bef24c050cf6",
            "port_name": "eth1",
            "vlan_id": "9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "vlan_vnid": 1075
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "device_id": "6e5ca532-3df7-4eae-b7d2-0e8777e9543a",
            "force_bond": false,
            "id": "34de7d4f-b547-4f9b-9f27-204978948be9:9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "native": false,
            "port_id": "34de7d4f-b547-4f9b-9f27-204978948be9",
            "port_name": "eth1",
            "vlan_id": "9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "vlan_vnid": 1075
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "device_id": "2bd5774c-db2d-4472-bd16-c060bec08613",
            "force_bond": false,
            "id": "2f5afadc-be72-4335-8abc-d182c7a79750:9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "native": false,
            "port_id": "2f5afadc-be72-4335-8abc-d182c7a79750",
            "port_name": "eth1",
            "vlan_id": "9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "vlan_vnid": 1075
          },
          "private": "bnVsbA==",
          "dependencies": [
            "packet_device.esxi_hosts",
            "packet_device_network_type.esxi_hosts",
            "packet_reserved_ip_block.esx_ip_blocks",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_port_vlan_attachment",
      "name": "router_priv_vlan_attach",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "force_bond": false,
            "id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d:32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "native": false,
            "port_id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d",
            "port_name": "eth1",
            "vlan_id": "32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "vlan_vnid": 1074
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_device_network_type.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "force_bond": false,
            "id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d:64d980a6-0864-4c0b-a897-db1eef74ed09",
            "native": false,
            "port_id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d",
            "port_name": "eth1",
            "vlan_id": "64d980a6-0864-4c0b-a897-db1eef74ed09",
            "vlan_vnid": 1072
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_device_network_type.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "force_bond": false,
            "id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d:088ffdd6-aba0-434e-b312-da65539ee2c5",
            "native": false,
            "port_id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d",
            "port_name": "eth1",
            "vlan_id": "088ffdd6-aba0-434e-b312-da65539ee2c5",
            "vlan_vnid": 1073
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_device_network_type.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_port_vlan_attachment",
      "name": "router_pub_vlan_attach",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "device_id": "64fa36e7-7d7b-4b50-82ee-ffeff720b216",
            "force_bond": false,
            "id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d:9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "native": false,
            "port_id": "17d9c81a-c7a2-4919-9ef6-c85079d1957d",
            "port_name": "eth1",
            "vlan_id": "9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "vlan_vnid": 1075
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.user_data",
            "packet_device.router",
            "packet_device_network_type.router",
            "packet_vlan.private_vlans",
            "packet_vlan.public_vlans"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_reserved_ip_block",
      "name": "esx_ip_blocks",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "address": "86.109.7.202",
            "address_family": 4,
            "cidr": 29,
            "cidr_notation": "86.109.7.200/29",
            "description": null,
            "facility": "dc13",
            "gateway": "86.109.7.201",
            "global": false,
            "id": "1f8308b3-31ef-4c09-8304-7246ebbb01dd",
            "manageable": true,
            "management": false,
            "netmask": "255.255.255.248",
            "network": "86.109.7.200",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "public": true,
            "quantity": 8,
            "type": "public_ipv4"
          },
          "private": "bnVsbA=="
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "address": "86.109.7.210",
            "address_family": 4,
            "cidr": 29,
            "cidr_notation": "86.109.7.208/29",
            "description": null,
            "facility": "dc13",
            "gateway": "86.109.7.209",
            "global": false,
            "id": "658b6f88-c604-466b-a20e-1a27e78bbf33",
            "manageable": true,
            "management": false,
            "netmask": "255.255.255.248",
            "network": "86.109.7.208",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "public": true,
            "quantity": 8,
            "type": "public_ipv4"
          },
          "private": "bnVsbA=="
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "address": "86.109.7.218",
            "address_family": 4,
            "cidr": 29,
            "cidr_notation": "86.109.7.216/29",
            "description": null,
            "facility": "dc13",
            "gateway": "86.109.7.217",
            "global": false,
            "id": "d45bd1e8-755d-45fa-8bdf-64a7db499b79",
            "manageable": true,
            "management": false,
            "netmask": "255.255.255.248",
            "network": "86.109.7.216",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "public": true,
            "quantity": 8,
            "type": "public_ipv4"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_vlan",
      "name": "private_vlans",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "description": "\"VM Private Net 1\"",
            "facility": "dc13",
            "id": "32ed6d9f-89df-487b-b553-24b6ce65bfa6",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "vxlan": 1074
          },
          "private": "bnVsbA=="
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "description": "\"vMotion\"",
            "facility": "dc13",
            "id": "64d980a6-0864-4c0b-a897-db1eef74ed09",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "vxlan": 1072
          },
          "private": "bnVsbA=="
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "description": "\"vSAN\"",
            "facility": "dc13",
            "id": "088ffdd6-aba0-434e-b312-da65539ee2c5",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "vxlan": 1073
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "packet_vlan",
      "name": "public_vlans",
      "provider": "provider[\"registry.terraform.io/packethost/packet\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "description": "\"VM Public Net 1\"",
            "facility": "dc13",
            "id": "9a565a11-f5cf-4bff-9231-b02fdbb9bd88",
            "project_id": "73c74072-6c2d-49b9-a995-53eef8ff0dcb",
            "vxlan": 1075
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "ipsec_psk",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "xO5M@NHH2vU$A9Vyfx9y",
            "keepers": null,
            "length": 20,
            "lower": true,
            "min_lower": 2,
            "min_numeric": 2,
            "min_special": 2,
            "min_upper": 2,
            "number": true,
            "override_special": "$!?@*",
            "result": "xO5M@NHH2vU$A9Vyfx9y",
            "special": true,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "sso_password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "4!c1Dmu!?GVoZD9a",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 2,
            "min_numeric": 2,
            "min_special": 2,
            "min_upper": 2,
            "number": true,
            "override_special": "$!?@*",
            "result": "4!c1Dmu!?GVoZD9a",
            "special": true,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "vcenter_password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "0UPjq0YB?5g?Jnzz",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 2,
            "min_numeric": 2,
            "min_special": 2,
            "min_upper": 2,
            "number": true,
            "override_special": "$!?@*",
            "result": "0UPjq0YB?5g?Jnzz",
            "special": true,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "vpn_pass",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "7QcnDt$FW4pvG$F!",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 2,
            "min_numeric": 2,
            "min_special": 2,
            "min_upper": 2,
            "number": true,
            "override_special": "$!?@*",
            "result": "7QcnDt$FW4pvG$F!",
            "special": true,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}
